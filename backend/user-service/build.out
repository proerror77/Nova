   Compiling user-service v0.1.0 (/Users/proerror/Documents/nova/backend/user-service)
warning: unused import: `postgres::PgRow`
 --> user-service/src/db/messaging_repo.rs:6:12
  |
6 | use sqlx::{postgres::PgRow, PgPool, Row};
  |            ^^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: ambiguous glob re-exports
  --> user-service/src/handlers/mod.rs:15:9
   |
15 | pub use auth::*;
   |         ^^^^^^^ the name `ErrorResponse` in the type namespace is first re-exported here
...
22 | pub use password_reset::*;
   |         ----------------- but the name `ErrorResponse` in the type namespace is also re-exported here
   |
   = note: `#[warn(ambiguous_glob_reexports)]` on by default

warning: unused import: `uuid::Uuid`
  --> user-service/src/jobs/dlq_handler.rs:16:5
   |
16 | use uuid::Uuid;
   |     ^^^^^^^^^^

warning: unused import: `error`
 --> user-service/src/jobs/metrics_export.rs:8:15
  |
8 | use tracing::{error, info, warn};
  |               ^^^^^

warning: unused import: `RATE_LIMITED_IPS_GAUGE`
  --> user-service/src/middleware/metrics.rs:10:22
   |
10 | use crate::metrics::{RATE_LIMITED_IPS_GAUGE, RATE_LIMIT_HITS};
   |                      ^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `anyhow`
 --> user-service/src/services/backup_codes.rs:3:14
  |
3 | use anyhow::{anyhow, Context, Result};
  |              ^^^^^^

warning: unused imports: `AppError` and `Result`
 --> user-service/src/services/cdn_service.rs:8:20
  |
8 | use crate::error::{AppError, Result};
  |                    ^^^^^^^^  ^^^^^^

warning: unused imports: `error` and `warn`
  --> user-service/src/services/cdn_service.rs:12:22
   |
12 | use tracing::{debug, error, info, warn};
   |                      ^^^^^        ^^^^

warning: unused import: `warn`
 --> user-service/src/services/events/consumer.rs:9:35
  |
9 | use tracing::{debug, error, info, warn};
  |                                   ^^^^

warning: unused import: `std::sync::Arc`
  --> user-service/src/services/notifications/kafka_consumer.rs:14:5
   |
14 | use std::sync::Arc;
   |     ^^^^^^^^^^^^^^

warning: unused imports: `debug` and `info`
 --> user-service/src/services/ranking_engine.rs:5:15
  |
5 | use tracing::{debug, info};
  |               ^^^^^  ^^^^

warning: unused import: `AppError`
  --> user-service/src/services/recommendation_v2/collaborative_filtering.rs:14:20
   |
14 | use crate::error::{AppError, Result};
   |                    ^^^^^^^^

warning: unused import: `AppError`
  --> user-service/src/services/recommendation_v2/content_based.rs:13:20
   |
13 | use crate::error::{AppError, Result};
   |                    ^^^^^^^^

warning: unused import: `AppError`
  --> user-service/src/services/recommendation_v2/onnx_serving.rs:10:20
   |
10 | use crate::error::{AppError, Result};
   |                    ^^^^^^^^

warning: unused imports: `StreamDetails`, `StreamStatus`, and `StreamSummary`
 --> user-service/src/services/streaming/repository.rs:7:34
  |
7 |     CreatorInfo, StreamCategory, StreamDetails, StreamRow, StreamStatus, StreamSummary,
  |                                  ^^^^^^^^^^^^^             ^^^^^^^^^^^^  ^^^^^^^^^^^^^

warning: unused imports: `DateTime` and `Utc`
  --> user-service/src/services/streaming/repository.rs:10:14
   |
10 | use chrono::{DateTime, Utc};
   |              ^^^^^^^^  ^^^

warning: unused import: `Context`
 --> user-service/src/services/streaming/stream_service.rs:8:22
  |
8 | use anyhow::{anyhow, Context, Result};
  |                      ^^^^^^^

warning: unused import: `crate::models::video::TranscodingJob`
 --> user-service/src/services/transcoding_optimizer.rs:9:5
  |
9 | use crate::models::video::TranscodingJob;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `warn`
  --> user-service/src/services/transcoding_optimizer.rs:13:35
   |
13 | use tracing::{debug, error, info, warn};
   |                                   ^^^^

warning: unused import: `chrono::Utc`
 --> user-service/src/services/video_service.rs:5:5
  |
5 | use chrono::Utc;
  |     ^^^^^^^^^^^

warning: unused imports: `debug`, `error`, `info`, and `warn`
 --> user-service/src/services/video_service.rs:8:15
  |
8 | use tracing::{debug, error, info, warn};
  |               ^^^^^  ^^^^^  ^^^^  ^^^^

warning: unused import: `std::process::Command`
 --> user-service/src/services/video_transcoding.rs:7:5
  |
7 | use std::process::Command;
  |     ^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `warn`
 --> user-service/src/services/video_transcoding.rs:8:35
  |
8 | use tracing::{debug, error, info, warn};
  |                                   ^^^^

warning: use of deprecated function `base64::encode`: Use Engine::encode
   --> user-service/src/handlers/auth.rs:648:27
    |
648 |     let qr_code = base64::encode(&qr_code_bytes);
    |                           ^^^^^^
    |
    = note: `#[warn(deprecated)]` on by default

warning: unused variable: `muted`
   --> user-service/src/db/messaging_repo.rs:276:21
    |
276 |         if let Some(muted) = is_muted {
    |                     ^^^^^ help: if this is intentional, prefix it with an underscore: `_muted`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `archived`
   --> user-service/src/db/messaging_repo.rs:281:21
    |
281 |         if let Some(archived) = is_archived {
    |                     ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_archived`

warning: this function depends on never type fallback being `()`
   --> user-service/src/jobs/cache_warmer.rs:131:5
    |
131 |     async fn warmup_user_feed(&self, ctx: &JobContext, user_id: Uuid) -> Result<usize> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in Rust 2024 and in a future release in all editions!
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/never-type-fallback.html>
    = help: specify the types explicitly
note: in edition 2024, the requirement `!: FromRedisValue` will fail
   --> user-service/src/jobs/cache_warmer.rs:153:14
    |
153 |             .query_async(&mut conn)
    |              ^^^^^^^^^^^
    = note: `#[warn(dependency_on_unit_never_type_fallback)]` on by default
help: use `()` annotations to avoid fallback changes
    |
153 |             .query_async::<_, ()>(&mut conn)
    |                         +++++++++

warning: value assigned to `skipped_count` is never read
   --> user-service/src/jobs/cache_warmer.rs:172:17
    |
172 |         let mut skipped_count = 0;
    |                 ^^^^^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?
    = note: `#[warn(unused_assignments)]` on by default

warning: this function depends on never type fallback being `()`
   --> user-service/src/jobs/suggested_users_generator.rs:186:5
    |
186 | /     async fn write_suggestions_batch(
187 | |         &self,
188 | |         ctx: &JobContext,
189 | |         suggestions: Vec<(Uuid, Vec<UserWithScore>)>,
190 | |     ) -> Result<()> {
    | |___________________^
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in Rust 2024 and in a future release in all editions!
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/never-type-fallback.html>
    = help: specify the types explicitly
note: in edition 2024, the requirement `!: FromRedisValue` will fail
   --> user-service/src/jobs/suggested_users_generator.rs:203:14
    |
203 |         pipe.query_async(&mut conn)
    |              ^^^^^^^^^^^
help: use `()` annotations to avoid fallback changes
    |
203 |         pipe.query_async::<_, ()>(&mut conn)
    |                         +++++++++

warning: unused variable: `topic`
   --> user-service/src/services/cdc/consumer.rs:208:13
    |
208 |         let topic = msg.topic();
    |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_topic`

warning: unused variable: `device_token`
  --> user-service/src/services/notifications/apns_client.rs:74:9
   |
74 |         device_token: &str,
   |         ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_device_token`

warning: unused variable: `title`
  --> user-service/src/services/notifications/apns_client.rs:75:9
   |
75 |         title: &str,
   |         ^^^^^ help: if this is intentional, prefix it with an underscore: `_title`

warning: unused variable: `body`
  --> user-service/src/services/notifications/apns_client.rs:76:9
   |
76 |         body: &str,
   |         ^^^^ help: if this is intentional, prefix it with an underscore: `_body`

warning: unused variable: `priority`
  --> user-service/src/services/notifications/apns_client.rs:77:9
   |
77 |         priority: APNsPriority,
   |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_priority`

warning: unused variable: `title`
  --> user-service/src/services/notifications/apns_client.rs:97:9
   |
97 |         title: &str,
   |         ^^^^^ help: if this is intentional, prefix it with an underscore: `_title`

warning: unused variable: `body`
  --> user-service/src/services/notifications/apns_client.rs:98:9
   |
98 |         body: &str,
   |         ^^^^ help: if this is intentional, prefix it with an underscore: `_body`

warning: unused variable: `priority`
  --> user-service/src/services/notifications/apns_client.rs:99:9
   |
99 |         priority: APNsPriority,
   |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_priority`

warning: unused variable: `device_token`
   --> user-service/src/services/notifications/apns_client.rs:112:9
    |
112 |         device_token: &str,
    |         ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_device_token`

warning: unused variable: `title`
   --> user-service/src/services/notifications/apns_client.rs:113:9
    |
113 |         title: &str,
    |         ^^^^^ help: if this is intentional, prefix it with an underscore: `_title`

warning: unused variable: `body`
   --> user-service/src/services/notifications/apns_client.rs:114:9
    |
114 |         body: &str,
    |         ^^^^ help: if this is intentional, prefix it with an underscore: `_body`

warning: unused variable: `badge`
   --> user-service/src/services/notifications/apns_client.rs:115:9
    |
115 |         badge: i32,
    |         ^^^^^ help: if this is intentional, prefix it with an underscore: `_badge`

warning: unused variable: `device_token`
   --> user-service/src/services/notifications/apns_client.rs:128:9
    |
128 |         device_token: &str,
    |         ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_device_token`

warning: unused variable: `data`
   --> user-service/src/services/notifications/apns_client.rs:129:9
    |
129 |         data: serde_json::Value,
    |         ^^^^ help: if this is intentional, prefix it with an underscore: `_data`

warning: unused variable: `device_token`
  --> user-service/src/services/notifications/fcm_client.rs:50:9
   |
50 |         device_token: &str,
   |         ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_device_token`

warning: unused variable: `title`
  --> user-service/src/services/notifications/fcm_client.rs:51:9
   |
51 |         title: &str,
   |         ^^^^^ help: if this is intentional, prefix it with an underscore: `_title`

warning: unused variable: `body`
  --> user-service/src/services/notifications/fcm_client.rs:52:9
   |
52 |         body: &str,
   |         ^^^^ help: if this is intentional, prefix it with an underscore: `_body`

warning: unused variable: `data`
  --> user-service/src/services/notifications/fcm_client.rs:53:9
   |
53 |         data: Option<serde_json::Value>,
   |         ^^^^ help: if this is intentional, prefix it with an underscore: `_data`

warning: unused variable: `title`
  --> user-service/src/services/notifications/fcm_client.rs:72:9
   |
72 |         title: &str,
   |         ^^^^^ help: if this is intentional, prefix it with an underscore: `_title`

warning: unused variable: `body`
  --> user-service/src/services/notifications/fcm_client.rs:73:9
   |
73 |         body: &str,
   |         ^^^^ help: if this is intentional, prefix it with an underscore: `_body`

warning: unused variable: `data`
  --> user-service/src/services/notifications/fcm_client.rs:74:9
   |
74 |         data: Option<serde_json::Value>,
   |         ^^^^ help: if this is intentional, prefix it with an underscore: `_data`

warning: unused variable: `topic`
   --> user-service/src/services/notifications/fcm_client.rs:101:9
    |
101 |         topic: &str,
    |         ^^^^^ help: if this is intentional, prefix it with an underscore: `_topic`

warning: unused variable: `title`
   --> user-service/src/services/notifications/fcm_client.rs:102:9
    |
102 |         title: &str,
    |         ^^^^^ help: if this is intentional, prefix it with an underscore: `_title`

warning: unused variable: `body`
   --> user-service/src/services/notifications/fcm_client.rs:103:9
    |
103 |         body: &str,
    |         ^^^^ help: if this is intentional, prefix it with an underscore: `_body`

warning: unused variable: `device_token`
   --> user-service/src/services/notifications/fcm_client.rs:114:40
    |
114 |     pub async fn validate_token(&self, device_token: &str) -> Result<bool, String> {
    |                                        ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_device_token`

warning: unused variable: `message`
   --> user-service/src/services/notifications/kafka_consumer.rs:190:9
    |
190 |         message: KafkaNotification,
    |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_message`

warning: unused variable: `attempt`
   --> user-service/src/services/notifications/kafka_consumer.rs:191:9
    |
191 |         attempt: u32,
    |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_attempt`

warning: unused variable: `config`
  --> user-service/src/services/recommendation_v2/mod.rs:45:22
   |
45 |     pub async fn new(config: RecommendationConfig) -> Result<Self> {
   |                      ^^^^^^ help: if this is intentional, prefix it with an underscore: `_config`

warning: unused variable: `user_id`
  --> user-service/src/services/recommendation_v2/mod.rs:59:9
   |
59 |         user_id: Uuid,
   |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_user_id`

warning: unused variable: `limit`
  --> user-service/src/services/recommendation_v2/mod.rs:60:9
   |
60 |         limit: usize,
   |         ^^^^^ help: if this is intentional, prefix it with an underscore: `_limit`

warning: unused variable: `event`
   --> user-service/src/services/recommendation_v2/ab_testing.rs:157:35
    |
157 |     pub async fn log_event(&self, event: ExperimentEvent) -> Result<()> {
    |                                   ^^^^^ help: if this is intentional, prefix it with an underscore: `_event`

warning: unused variable: `user_id`
  --> user-service/src/services/recommendation_v2/content_based.rs:62:44
   |
62 |     pub async fn build_user_profile(&self, user_id: Uuid) -> Result<Vec<f32>> {
   |                                            ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_user_id`

warning: unused variable: `action`
  --> user-service/src/services/recommendation_v2/content_based.rs:71:23
   |
71 |         for (post_id, action, weight) in interactions {
   |                       ^^^^^^ help: if this is intentional, prefix it with an underscore: `_action`

warning: unused variable: `user_id`
   --> user-service/src/services/recommendation_v2/hybrid_ranker.rs:133:9
    |
133 |         user_id: Uuid,
    |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_user_id`

warning: unused variable: `input`
  --> user-service/src/services/recommendation_v2/onnx_serving.rs:76:31
   |
76 |     pub async fn infer(&self, input: Vec<f32>) -> Result<Vec<f32>> {
   |                               ^^^^^ help: if this is intentional, prefix it with an underscore: `_input`

warning: unused variable: `json_data`
   --> user-service/src/services/redis_job.rs:165:13
    |
165 |         let json_data = serde_json::to_string(posts)?;
    |             ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_json_data`

warning: unused variable: `cache_key`
   --> user-service/src/services/redis_job.rs:333:9
    |
333 |         cache_key: &str,
    |         ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_cache_key`

warning: unused variable: `json_data`
   --> user-service/src/services/redis_job.rs:336:13
    |
336 |         let json_data = serde_json::to_string(suggestions)?;
    |             ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_json_data`

warning: unused variable: `user_id`
  --> user-service/src/services/messaging/conversation_service.rs:78:9
   |
78 |         user_id: Uuid,
   |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_user_id`

warning: unused variable: `limit`
  --> user-service/src/services/messaging/conversation_service.rs:79:9
   |
79 |         limit: i64,
   |         ^^^^^ help: if this is intentional, prefix it with an underscore: `_limit`

warning: unused variable: `offset`
  --> user-service/src/services/messaging/conversation_service.rs:80:9
   |
80 |         offset: i64,
   |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_offset`

warning: unused variable: `include_archived`
  --> user-service/src/services/messaging/conversation_service.rs:81:9
   |
81 |         include_archived: bool,
   |         ^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_include_archived`

warning: unused variable: `repo`
  --> user-service/src/services/messaging/conversation_service.rs:83:13
   |
83 |         let repo = MessagingRepository::new(&self.pool);
   |             ^^^^ help: if this is intentional, prefix it with an underscore: `_repo`

error[E0308]: mismatched types
   --> user-service/src/services/messaging/conversation_service.rs:117:13
    |
117 |             members,
    |             ^^^^^^^ expected `Vec<ConversationMemberWithUser>`, found `Vec<ConversationMember>`
    |
    = note: expected struct `Vec<ConversationMemberWithUser>`
               found struct `Vec<ConversationMember>`

warning: unused variable: `message_id`
   --> user-service/src/services/messaging/message_service.rs:162:9
    |
162 |         message_id: Uuid,
    |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_message_id`

warning: unused variable: `user_id`
   --> user-service/src/services/messaging/message_service.rs:163:9
    |
163 |         user_id: Uuid,
    |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_user_id`

warning: unused variable: `new_encrypted_content`
   --> user-service/src/services/messaging/message_service.rs:164:9
    |
164 |         new_encrypted_content: String,
    |         ^^^^^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_new_encrypted_content`

warning: unused variable: `new_nonce`
   --> user-service/src/services/messaging/message_service.rs:165:9
    |
165 |         new_nonce: String,
    |         ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_new_nonce`

warning: unused variable: `message_id`
   --> user-service/src/services/messaging/message_service.rs:171:40
    |
171 |     pub async fn delete_message(&self, message_id: Uuid, user_id: Uuid) -> Result<(), AppError> {
    |                                        ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_message_id`

warning: unused variable: `user_id`
   --> user-service/src/services/messaging/message_service.rs:171:58
    |
171 |     pub async fn delete_message(&self, message_id: Uuid, user_id: Uuid) -> Result<(), AppError> {
    |                                                          ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_user_id`

warning: unused variable: `channel`
  --> user-service/src/services/messaging/websocket_handler.rs:25:13
   |
25 |         let channel = format!("conversation:{}:messages", message.conversation_id);
   |             ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_channel`

warning: unused variable: `payload`
  --> user-service/src/services/messaging/websocket_handler.rs:39:13
   |
39 |         let payload = serde_json::to_string(&event)
   |             ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_payload`

warning: unused variable: `channel`
  --> user-service/src/services/messaging/websocket_handler.rs:57:13
   |
57 |         let channel = format!("conversation:{}:typing", conversation_id);
   |             ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_channel`

warning: unused variable: `key`
  --> user-service/src/services/messaging/websocket_handler.rs:61:17
   |
61 |             let key = format!("typing:{}:{}", conversation_id, user_id);
   |                 ^^^ help: if this is intentional, prefix it with an underscore: `_key`

warning: unused variable: `payload`
  --> user-service/src/services/messaging/websocket_handler.rs:76:17
   |
76 |             let payload = serde_json::to_string(&event)
   |                 ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_payload`

warning: unused variable: `key`
  --> user-service/src/services/messaging/websocket_handler.rs:83:17
   |
83 |             let key = format!("typing:{}:{}", conversation_id, user_id);
   |                 ^^^ help: if this is intentional, prefix it with an underscore: `_key`

warning: unused variable: `payload`
  --> user-service/src/services/messaging/websocket_handler.rs:98:17
   |
98 |             let payload = serde_json::to_string(&event)
   |                 ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_payload`

warning: unused variable: `channel`
   --> user-service/src/services/messaging/websocket_handler.rs:115:13
    |
115 |         let channel = format!("conversation:{}:read", conversation_id);
    |             ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_channel`

warning: unused variable: `payload`
   --> user-service/src/services/messaging/websocket_handler.rs:125:13
    |
125 |         let payload = serde_json::to_string(&event)
    |             ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_payload`

warning: unused variable: `user_id`
   --> user-service/src/services/messaging/websocket_handler.rs:136:56
    |
136 |     pub async fn get_user_subscription_channels(&self, user_id: Uuid) -> Result<Vec<String>, AppError> {
    |                                                        ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_user_id`

warning: this function depends on never type fallback being `()`
  --> user-service/src/services/streaming/redis_counter.rs:78:5
   |
78 |     pub async fn decrement_viewers(&mut self, stream_id: Uuid) -> Result<i32> {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in Rust 2024 and in a future release in all editions!
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/never-type-fallback.html>
   = help: specify the types explicitly
note: in edition 2024, the requirement `!: FromRedisValue` will fail
  --> user-service/src/services/streaming/redis_counter.rs:88:24
   |
88 |             self.redis.set(&key, 0).await?;
   |                        ^^^
help: use `()` annotations to avoid fallback changes
   |
88 |             self.redis.set::<_, _, ()>(&key, 0).await?;
   |                           ++++++++++++

warning: this function depends on never type fallback being `()`
   --> user-service/src/services/streaming/redis_counter.rs:114:5
    |
114 |     async fn update_peak_if_higher(&mut self, stream_id: Uuid, current: i32) -> Result<()> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in Rust 2024 and in a future release in all editions!
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/never-type-fallback.html>
    = help: specify the types explicitly
note: in edition 2024, the requirement `!: FromRedisValue` will fail
   --> user-service/src/services/streaming/redis_counter.rs:120:24
    |
120 |             self.redis.set_ex(&peak_key, current, 86400).await?;
    |                        ^^^^^^
help: use `()` annotations to avoid fallback changes
    |
120 |             self.redis.set_ex::<_, _, ()>(&peak_key, current, 86400).await?;
    |                              ++++++++++++

warning: this function depends on never type fallback being `()`
   --> user-service/src/services/streaming/redis_counter.rs:145:5
    |
145 |     pub async fn update_heartbeat(&mut self, stream_id: Uuid) -> Result<()> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in Rust 2024 and in a future release in all editions!
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/never-type-fallback.html>
    = help: specify the types explicitly
note: in edition 2024, the requirement `!: FromRedisValue` will fail
   --> user-service/src/services/streaming/redis_counter.rs:148:20
    |
148 |         self.redis.set_ex(&key, timestamp, 30).await?; // 30s TTL
    |                    ^^^^^^
help: use `()` annotations to avoid fallback changes
    |
148 |         self.redis.set_ex::<_, _, ()>(&key, timestamp, 30).await?; // 30s TTL
    |                          ++++++++++++

warning: unused variable: `prev_speed`
   --> user-service/src/services/transcoding_progress.rs:180:17
    |
180 |             let prev_speed = history[history.len() - 2].speed_fps;
    |                 ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_prev_speed`

warning: unused import: `Row`
 --> user-service/src/db/messaging_repo.rs:6:37
  |
6 | use sqlx::{postgres::PgRow, PgPool, Row};
  |                                     ^^^

warning: unused variable: `title`
   --> user-service/src/services/notifications/apns_client.rs:169:9
    |
169 |         title: &str,
    |         ^^^^^ help: if this is intentional, prefix it with an underscore: `_title`

warning: unused variable: `body`
   --> user-service/src/services/notifications/apns_client.rs:170:9
    |
170 |         body: &str,
    |         ^^^^ help: if this is intentional, prefix it with an underscore: `_body`

warning: unused variable: `sound`
   --> user-service/src/services/notifications/apns_client.rs:171:9
    |
171 |         sound: bool,
    |         ^^^^^ help: if this is intentional, prefix it with an underscore: `_sound`

warning: unused variable: `user_sim_path`
  --> user-service/src/services/recommendation_v2/collaborative_filtering.rs:44:9
   |
44 |         user_sim_path: &str,
   |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_user_sim_path`

warning: unused variable: `item_sim_path`
  --> user-service/src/services/recommendation_v2/collaborative_filtering.rs:45:9
   |
45 |         item_sim_path: &str,
   |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_item_sim_path`

warning: unused variable: `k_neighbors`
  --> user-service/src/services/recommendation_v2/collaborative_filtering.rs:46:9
   |
46 |         k_neighbors: usize,
   |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_k_neighbors`

warning: unused variable: `user_id`
  --> user-service/src/services/recommendation_v2/collaborative_filtering.rs:64:9
   |
64 |         user_id: Uuid,
   |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_user_id`

warning: unused variable: `seen_posts`
  --> user-service/src/services/recommendation_v2/collaborative_filtering.rs:65:9
   |
65 |         seen_posts: &[Uuid],
   |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_seen_posts`

warning: unused variable: `n`
  --> user-service/src/services/recommendation_v2/collaborative_filtering.rs:66:9
   |
66 |         n: usize,
   |         ^ help: if this is intentional, prefix it with an underscore: `_n`

warning: unused variable: `path`
  --> user-service/src/services/recommendation_v2/content_based.rs:46:31
   |
46 |     pub fn load_post_features(path: &str) -> Result<HashMap<Uuid, Vec<f32>>> {
   |                               ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: unused variable: `candidate`
   --> user-service/src/services/recommendation_v2/hybrid_ranker.rs:253:38
    |
253 |     fn compute_max_similarity(&self, candidate: Uuid, selected: &[RankedPost]) -> f64 {
    |                                      ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_candidate`

warning: unused variable: `selected`
   --> user-service/src/services/recommendation_v2/hybrid_ranker.rs:253:55
    |
253 |     fn compute_max_similarity(&self, candidate: Uuid, selected: &[RankedPost]) -> f64 {
    |                                                       ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_selected`

warning: unused variable: `total_segments`
  --> user-service/src/services/streaming_manifest.rs:95:13
   |
95 |         let total_segments = (duration_seconds + segment_duration - 1) / segment_duration;
   |             ^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_total_segments`

For more information about this error, try `rustc --explain E0308`.
warning: `user-service` (lib) generated 106 warnings
error: could not compile `user-service` (lib) due to 1 previous error; 106 warnings emitted
