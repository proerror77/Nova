version: '3.8'

services:
  # PostgreSQL database for notification storage
  postgres:
    image: postgres:16-alpine
    container_name: notification-postgres
    environment:
      POSTGRES_USER: nova_user
      POSTGRES_PASSWORD: nova_password
      POSTGRES_DB: nova_notifications
    ports:
      - "5433:5432"
    volumes:
      - notification-postgres-data:/var/lib/postgresql/data
      - ./backend/notification-service/migrations:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U nova_user -d nova_notifications"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - notification-network

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: notification-redis
    ports:
      - "6380:6379"
    command: redis-server --appendonly yes
    volumes:
      - notification-redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - notification-network

  # Kafka broker for event streaming
  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: notification-kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    ports:
      - "9093:9092"
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - notification-network

  # Zookeeper for Kafka coordination
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: notification-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2182:2181"
    healthcheck:
      test: ["CMD", "echo", "ruok", "|", "nc", "localhost", "2181"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - notification-network

  # Notification Service
  notification-service:
    build:
      context: .
      dockerfile: ./backend/notification-service/Dockerfile
    container_name: notification-service
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      RUST_LOG: info
      PORT: 8000
      DATABASE_URL: postgres://nova_user:nova_password@postgres:5432/nova_notifications
      REDIS_URL: redis://redis:6379
      KAFKA_BROKERS: kafka:9092
      KAFKA_TOPIC: notifications
    ports:
      - "8000:8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - notification-network

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: notification-prometheus
    volumes:
      - ./backend/prometheus.yml:/etc/prometheus/prometheus.yml
      - notification-prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    ports:
      - "9091:9090"
    networks:
      - notification-network

networks:
  notification-network:
    driver: bridge

volumes:
  notification-postgres-data:
  notification-redis-data:
  notification-prometheus-data:
