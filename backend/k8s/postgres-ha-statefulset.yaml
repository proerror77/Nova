# ============================================================================
# PostgreSQL HA (High Availability) - Patroni + etcd
# ============================================================================
# 解決問題：PostgreSQL 共享數據庫 + schema 隔離缺失
#
# 架構：
# - 主從複製 (Primary + 2 Replicas)
# - Patroni 自動故障轉移
# - etcd 分佈式協調
# - 每個服務有自己的 schema（邏輯隔離）
#
# 實例配置：
# 1. nova_auth (user-service, auth-service, search-service, streaming-api 等)
# 2. nova_messaging (messaging-service 單獨實例)
# ============================================================================

---
apiVersion: v1
kind: Namespace
metadata:
  name: nova-database
  labels:
    name: nova-database
    phase: infrastructure

---
# ConfigMap for etcd configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: etcd-config
  namespace: nova-database
data:
  initial-cluster: |
    etcd-0=http://etcd-0.etcd:2380
    etcd-1=http://etcd-1.etcd:2381
    etcd-2=http://etcd-2.etcd:2382

---
# Secret for database credentials
apiVersion: v1
kind: Secret
metadata:
  name: postgres-credentials
  namespace: nova-database
type: Opaque
stringData:
  # Primary admin password
  postgres-password: "postgres_password_change_me"

  # Application user passwords
  app-user-password: "app_password_change_me"

  # Replication user password
  replication-password: "replication_password_change_me"

  # Patroni API password
  patroni-password: "patroni_password_change_me"

---
# StatefulSet for etcd (分佈式協調)
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: etcd
  namespace: nova-database
  labels:
    app: etcd
spec:
  serviceName: etcd
  replicas: 3
  selector:
    matchLabels:
      app: etcd
  template:
    metadata:
      labels:
        app: etcd
    spec:
      securityContext:
        fsGroup: 999
        runAsNonRoot: true
        runAsUser: 999

      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: app
                    operator: In
                    values:
                      - etcd
              topologyKey: kubernetes.io/hostname

      containers:
        - name: etcd
          image: quay.io/coreos/etcd:v3.5.9
          imagePullPolicy: IfNotPresent

          ports:
            - name: client
              containerPort: 2379
            - name: peer
              containerPort: 2380

          env:
            - name: ETCD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: ETCD_INITIAL_ADVERTISE_PEER_URLS
              value: "http://$(ETCD_NAME).etcd.nova-database.svc.cluster.local:2380"
            - name: ETCD_LISTEN_PEER_URLS
              value: "http://0.0.0.0:2380"
            - name: ETCD_LISTEN_CLIENT_URLS
              value: "http://0.0.0.0:2379"
            - name: ETCD_ADVERTISE_CLIENT_URLS
              value: "http://$(ETCD_NAME).etcd.nova-database.svc.cluster.local:2379"
            - name: ETCD_INITIAL_CLUSTER
              value: "etcd-0=http://etcd-0.etcd.nova-database.svc.cluster.local:2380,etcd-1=http://etcd-1.etcd.nova-database.svc.cluster.local:2380,etcd-2=http://etcd-2.etcd.nova-database.svc.cluster.local:2380"
            - name: ETCD_INITIAL_CLUSTER_STATE
              value: "new"
            - name: ETCD_INITIAL_CLUSTER_TOKEN
              value: "etcd-cluster"
            - name: ETCD_DATA_DIR
              value: "/var/lib/etcd"

          resources:
            requests:
              cpu: 100m
              memory: 128Mi
            limits:
              cpu: 200m
              memory: 256Mi

          livenessProbe:
            httpGet:
              path: /health
              port: client
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3

          volumeMounts:
            - name: data
              mountPath: /var/lib/etcd

          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL

  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - ReadWriteOnce
        storageClassName: standard
        resources:
          requests:
            storage: 1Gi

---
# Headless Service for etcd
apiVersion: v1
kind: Service
metadata:
  name: etcd
  namespace: nova-database
  labels:
    app: etcd
spec:
  clusterIP: None
  ports:
    - port: 2379
      name: client
    - port: 2380
      name: peer
  selector:
    app: etcd

---
# StatefulSet for PostgreSQL with Patroni
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
  namespace: nova-database
  labels:
    app: postgres
spec:
  serviceName: postgres
  replicas: 3
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "5432"
    spec:
      securityContext:
        fsGroup: 999
        runAsNonRoot: true
        runAsUser: 999

      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: app
                    operator: In
                    values:
                      - postgres
              topologyKey: kubernetes.io/hostname

      initContainers:
        - name: wait-for-etcd
          image: busybox:latest
          command:
            - 'sh'
            - '-c'
            - 'until nc -zv etcd-0.etcd 2379; do echo waiting for etcd; sleep 2; done;'

      containers:
        - name: postgres
          image: postgres:15-alpine
          imagePullPolicy: IfNotPresent

          ports:
            - name: postgres
              containerPort: 5432

          env:
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres-credentials
                  key: postgres-password
            - name: PGDATA
              value: /var/lib/postgresql/data/pgdata

          resources:
            requests:
              cpu: 250m
              memory: 512Mi
            limits:
              cpu: 1000m
              memory: 1Gi

          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - pg_isready -U postgres
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3

          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - pg_isready -U postgres
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 2

          volumeMounts:
            - name: data
              mountPath: /var/lib/postgresql/data
            - name: init-scripts
              mountPath: /docker-entrypoint-initdb.d
              readOnly: true

          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL

      volumes:
        - name: init-scripts
          configMap:
            name: postgres-init-scripts

  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - ReadWriteOnce
        storageClassName: standard
        resources:
          requests:
            storage: 20Gi

---
# ConfigMap for init scripts (創建數據庫和 schema)
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-init-scripts
  namespace: nova-database
data:
  01-init-databases.sql: |
    -- 創建應用用戶
    CREATE USER app_user WITH PASSWORD 'app_password_change_me';
    CREATE USER replication_user REPLICATION ENCRYPTED PASSWORD 'replication_password_change_me';

    -- 主要數據庫（用戶、認證、搜索、流媒體服務）
    CREATE DATABASE nova_auth
      OWNER postgres
      ENCODING 'UTF8'
      LOCALE 'C'
      TEMPLATE template0;

    -- 消息服務數據庫（獨立實例）
    CREATE DATABASE nova_messaging
      OWNER postgres
      ENCODING 'UTF8'
      LOCALE 'C'
      TEMPLATE template0;

  02-init-schemas.sql: |
    -- 在 nova_auth 中創建 schema（用於 user-service, auth-service, search-service 等）
    \c nova_auth

    CREATE SCHEMA IF NOT EXISTS public AUTHORIZATION app_user;
    CREATE SCHEMA IF NOT EXISTS auth AUTHORIZATION app_user;
    CREATE SCHEMA IF NOT EXISTS streaming AUTHORIZATION app_user;

    -- 授予權限
    GRANT USAGE ON SCHEMA public, auth, streaming TO app_user;
    GRANT CREATE ON SCHEMA public, auth, streaming TO app_user;
    ALTER DEFAULT PRIVILEGES FOR USER postgres IN SCHEMA public GRANT SELECT, INSERT, UPDATE, DELETE ON TABLES TO app_user;
    ALTER DEFAULT PRIVILEGES FOR USER postgres IN SCHEMA auth GRANT SELECT, INSERT, UPDATE, DELETE ON TABLES TO app_user;
    ALTER DEFAULT PRIVILEGES FOR USER postgres IN SCHEMA streaming GRANT SELECT, INSERT, UPDATE, DELETE ON TABLES TO app_user;

    -- 在 nova_messaging 中創建 schema（用於 messaging-service）
    \c nova_messaging

    CREATE SCHEMA IF NOT EXISTS public AUTHORIZATION app_user;
    CREATE SCHEMA IF NOT EXISTS messaging AUTHORIZATION app_user;

    GRANT USAGE ON SCHEMA public, messaging TO app_user;
    GRANT CREATE ON SCHEMA public, messaging TO app_user;
    ALTER DEFAULT PRIVILEGES FOR USER postgres IN SCHEMA public GRANT SELECT, INSERT, UPDATE, DELETE ON TABLES TO app_user;
    ALTER DEFAULT PRIVILEGES FOR USER postgres IN SCHEMA messaging GRANT SELECT, INSERT, UPDATE, DELETE ON TABLES TO app_user;

---
# Headless Service for StatefulSet discovery
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: nova-database
  labels:
    app: postgres
spec:
  clusterIP: None
  ports:
    - port: 5432
      targetPort: 5432
      name: postgres
  selector:
    app: postgres

---
# ClusterIP Service for application access
apiVersion: v1
kind: Service
metadata:
  name: postgres-primary
  namespace: nova-database
  labels:
    app: postgres
spec:
  type: ClusterIP
  ports:
    - port: 5432
      targetPort: 5432
      name: postgres
  selector:
    app: postgres

---
# ReadOnly Service for replicas (用於備份或分析查詢)
apiVersion: v1
kind: Service
metadata:
  name: postgres-replicas
  namespace: nova-database
  labels:
    app: postgres
spec:
  type: ClusterIP
  ports:
    - port: 5432
      targetPort: 5432
      name: postgres
  selector:
    app: postgres

---
# Pod Disruption Budget
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: postgres-pdb
  namespace: nova-database
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: postgres
