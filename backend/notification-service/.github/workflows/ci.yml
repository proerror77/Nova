name: Notification Service CI

on:
  push:
    branches: [ main, develop, feature/backend-optimization ]
    paths:
      - 'backend/notification-service/**'
      - 'backend/libs/nova-apns-shared/**'
      - 'backend/libs/nova-fcm-shared/**'
      - '.github/workflows/notification-ci.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'backend/notification-service/**'
      - 'backend/libs/**'

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  check:
    name: Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: dtolnay/rust-toolchain@stable

      - uses: Swatinem/rust-cache@v2
        with:
          workspaces: backend

      - name: Run cargo check
        run: cargo check --package notification-service --all-targets
        working-directory: backend

  fmt:
    name: Format
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt

      - name: Check formatting
        run: cargo fmt --package notification-service -- --check
        working-directory: backend

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy

      - uses: Swatinem/rust-cache@v2
        with:
          workspaces: backend

      - name: Run clippy
        run: cargo clippy --package notification-service --all-targets -- -D warnings
        working-directory: backend

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_notifications
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v4

      - uses: dtolnay/rust-toolchain@stable

      - uses: Swatinem/rust-cache@v2
        with:
          workspaces: backend

      - name: Run tests
        run: cargo test --package notification-service --verbose
        working-directory: backend
        env:
          DATABASE_URL: postgres://test_user:test_password@localhost/test_notifications

      - name: Run integration tests
        run: cargo test --package notification-service --test "*" --verbose
        working-directory: backend

  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v4

      - uses: docker/setup-buildx-action@v2

      - uses: docker/build-push-action@v4
        with:
          context: backend
          file: backend/notification-service/Dockerfile
          tags: |
            notification-service:latest
            notification-service:${{ github.sha }}
          push: false
          cache-from: type=gha
          cache-to: type=gha,mode=max

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: dtolnay/rust-toolchain@stable

      - uses: Swatinem/rust-cache@v2
        with:
          workspaces: backend

      - name: Install tarpaulin
        run: cargo install cargo-tarpaulin

      - name: Generate coverage
        run: cargo tarpaulin --package notification-service --out Xml
        working-directory: backend

      - name: Upload to codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./backend/cobertura.xml
          fail_ci_if_error: false

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: rustsec/audit-check-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
