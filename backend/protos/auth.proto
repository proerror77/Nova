syntax = "proto3";

package nova.auth.v1;

option go_package = "github.com/novacorp/nova/backend/proto/auth/v1";
option java_multiple_files = true;
option java_outer_classname = "AuthProto";

// AuthService provides user authentication and authorization
service AuthService {
  // User authentication
  rpc Register(RegisterRequest) returns (AuthResponse);
  rpc Login(LoginRequest) returns (AuthResponse);
  rpc ValidateToken(ValidateTokenRequest) returns (ValidateTokenResponse);
  rpc RefreshToken(RefreshTokenRequest) returns (AuthResponse);
  rpc Logout(LogoutRequest) returns (LogoutResponse);

  // OAuth authentication
  rpc StartOAuthFlow(StartOAuthFlowRequest) returns (StartOAuthFlowResponse);
  rpc CompleteOAuthFlow(CompleteOAuthFlowRequest) returns (AuthResponse);

  // Password management
  rpc RequestPasswordReset(RequestPasswordResetRequest) returns (RequestPasswordResetResponse);
  rpc ResetPassword(ResetPasswordRequest) returns (ResetPasswordResponse);
  rpc ChangePassword(ChangePasswordRequest) returns (ChangePasswordResponse);

  // Session management
  rpc CreateSession(CreateSessionRequest) returns (SessionResponse);
  rpc GetSession(GetSessionRequest) returns (SessionResponse);
  rpc RevokeSession(RevokeSessionRequest) returns (RevokeSessionResponse);
  rpc ListSessions(ListSessionsRequest) returns (ListSessionsResponse);

  // Two-factor authentication
  rpc RequestTwoFASetup(RequestTwoFASetupRequest) returns (RequestTwoFASetupResponse);
  rpc VerifyTwoFA(VerifyTwoFARequest) returns (VerifyTwoFAResponse);
  rpc DisableTwoFA(DisableTwoFARequest) returns (DisableTwoFAResponse);
}

// Register request
message RegisterRequest {
  string username = 1;
  string email = 2;
  string password = 3;
  string phone = 4;
}

// Login request
message LoginRequest {
  string email = 1;
  string password = 2;
  string device_id = 3;
  string device_name = 4;
}

// OAuth providers
enum OAuthProvider {
  OAUTH_PROVIDER_UNSPECIFIED = 0;
  OAUTH_PROVIDER_GOOGLE = 1;
  OAUTH_PROVIDER_APPLE = 2;
  OAUTH_PROVIDER_FACEBOOK = 3;
  OAUTH_PROVIDER_WECHAT = 4;
}

// Start OAuth flow request
message StartOAuthFlowRequest {
  OAuthProvider provider = 1;
  string redirect_uri = 2;
  string state = 3;
  string code_challenge = 4;
  string code_challenge_method = 5;
}

// Start OAuth flow response
message StartOAuthFlowResponse {
  string auth_url = 1;
  string state = 2;
  int64 expires_at = 3;
}

// Complete OAuth flow request
message CompleteOAuthFlowRequest {
  OAuthProvider provider = 1;
  string code = 2;
  string state = 3;
  string code_verifier = 4;
}

// Validate token request
message ValidateTokenRequest {
  string token = 1;
}

// Token claims
message TokenClaims {
  string user_id = 1;
  string email = 2;
  string username = 3;
  repeated string roles = 4;
  int64 issued_at = 5;
  int64 expires_at = 6;
}

// Validate token response
message ValidateTokenResponse {
  bool valid = 1;
  TokenClaims claims = 2;
  string error = 3;
}

// Refresh token request
message RefreshTokenRequest {
  string refresh_token = 1;
}

// Auth response (used for login, register, token refresh)
message AuthResponse {
  string user_id = 1;
  string username = 2;
  string email = 3;
  string access_token = 4;
  string refresh_token = 5;
  int64 access_token_expires_at = 6;
  int64 refresh_token_expires_at = 7;
  bool two_fa_required = 8;
}

// Logout request
message LogoutRequest {
  string user_id = 1;
  string session_id = 2;
}

// Logout response
message LogoutResponse {
  bool success = 1;
}

// Password reset requests
message RequestPasswordResetRequest {
  string email = 1;
}

message RequestPasswordResetResponse {
  bool success = 1;
  string message = 2;
}

message ResetPasswordRequest {
  string reset_token = 1;
  string new_password = 2;
}

message ResetPasswordResponse {
  bool success = 1;
  string message = 2;
}

message ChangePasswordRequest {
  string user_id = 1;
  string old_password = 2;
  string new_password = 3;
}

message ChangePasswordResponse {
  bool success = 1;
  string message = 2;
}

// Session management
message SessionInfo {
  string session_id = 1;
  string user_id = 2;
  string device_id = 3;
  string device_name = 4;
  string ip_address = 5;
  string user_agent = 6;
  int64 created_at = 7;
  int64 last_activity_at = 8;
  int64 expires_at = 9;
}

message CreateSessionRequest {
  string user_id = 1;
  string device_id = 2;
  string device_name = 3;
  string ip_address = 4;
  string user_agent = 5;
}

message SessionResponse {
  SessionInfo session = 1;
}

message GetSessionRequest {
  string session_id = 1;
}

message RevokeSessionRequest {
  string session_id = 1;
  string user_id = 2;
}

message RevokeSessionResponse {
  bool success = 1;
}

message ListSessionsRequest {
  string user_id = 1;
}

message ListSessionsResponse {
  repeated SessionInfo sessions = 1;
}

// Two-factor authentication
message RequestTwoFASetupRequest {
  string user_id = 1;
}

message RequestTwoFASetupResponse {
  string secret = 1;
  string qr_code_url = 2;
}

message VerifyTwoFARequest {
  string user_id = 1;
  string code = 2;
}

message VerifyTwoFAResponse {
  bool success = 1;
  repeated string backup_codes = 2;
}

message DisableTwoFARequest {
  string user_id = 1;
  string password = 2;
}

message DisableTwoFAResponse {
  bool success = 1;
}
