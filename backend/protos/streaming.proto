syntax = "proto3";

package nova.streaming.v1;

option go_package = "github.com/novacorp/nova/backend/proto/streaming/v1";
option java_multiple_files = true;
option java_outer_classname = "StreamingProto";

// StreamingService provides live streaming and streaming manifest capabilities
service StreamingService {
  // StartStream initiates a live stream
  rpc StartStream(StartStreamRequest) returns (StartStreamResponse);

  // StopStream ends a live stream
  rpc StopStream(StopStreamRequest) returns (StopStreamResponse);

  // GetStreamStatus retrieves stream status
  rpc GetStreamStatus(GetStreamStatusRequest) returns (StreamStatus);

  // GetStreamingManifest returns HLS/DASH manifest
  rpc GetStreamingManifest(GetStreamingManifestRequest)
    returns (GetStreamingManifestResponse);

  // UpdateStreamingProfile updates stream quality profile
  rpc UpdateStreamingProfile(UpdateStreamingProfileRequest)
    returns (UpdateStreamingProfileResponse);

  // GetStreamAnalytics retrieves stream analytics
  rpc GetStreamAnalytics(GetStreamAnalyticsRequest)
    returns (GetStreamAnalyticsResponse);

  // BroadcastChatMessage sends chat message to stream
  rpc BroadcastChatMessage(BroadcastChatMessageRequest)
    returns (BroadcastChatMessageResponse);
}

// StartStreamRequest initiates live stream
message StartStreamRequest {
  string user_id = 1;
  string title = 2;
  string description = 3;
  StreamingProfile profile = 4;
}

// StreamingProfile defines streaming quality parameters
message StreamingProfile {
  string name = 1;  // "high", "medium", "low"
  uint32 bitrate_kbps = 2;
  uint32 width = 3;
  uint32 height = 4;
  uint32 fps = 5;
}

// StartStreamResponse contains stream details
message StartStreamResponse {
  string stream_id = 1;
  string ingest_url = 2;  // RTMP ingest URL
  string ingest_key = 3;  // Stream key
  string playback_url = 4;  // HLS playback URL
  int64 started_at = 5;  // Unix timestamp
}

// StopStreamRequest ends live stream
message StopStreamRequest {
  string stream_id = 1;
  string user_id = 2;
}

// StopStreamResponse confirms stream stop
message StopStreamResponse {
  string stream_id = 1;
  bool success = 2;
  int64 stopped_at = 3;  // Unix timestamp
}

// GetStreamStatusRequest requests stream status
message GetStreamStatusRequest {
  string stream_id = 1;
}

// StreamStatus represents stream status
message StreamStatus {
  string stream_id = 1;
  string user_id = 2;
  string title = 3;
  string status = 4;  // "live", "ended", "error"
  int64 started_at = 5;
  int64 ended_at = 6;
  uint32 viewer_count = 7;
  uint32 duration_seconds = 8;
  StreamMetrics metrics = 9;
}

// StreamMetrics represents stream performance metrics
message StreamMetrics {
  double bitrate_kbps = 1;
  double packet_loss_percent = 2;
  double latency_ms = 3;
  uint32 total_viewers = 4;
  uint32 peak_viewers = 5;
}

// GetStreamingManifestRequest requests streaming manifest
message GetStreamingManifestRequest {
  string stream_id = 1;
  string format = 2;  // "hls", "dash"
}

// GetStreamingManifestResponse contains manifest content
message GetStreamingManifestResponse {
  string manifest_url = 1;
  string content = 2;  // Actual M3U8 or MPD content
  int64 generated_at = 3;
}

// UpdateStreamingProfileRequest updates stream profile
message UpdateStreamingProfileRequest {
  string stream_id = 1;
  StreamingProfile profile = 2;
}

// UpdateStreamingProfileResponse confirms profile update
message UpdateStreamingProfileResponse {
  string stream_id = 1;
  bool success = 2;
}

// GetStreamAnalyticsRequest requests stream analytics
message GetStreamAnalyticsRequest {
  string stream_id = 1;
  int64 start_time = 2;  // Unix timestamp
  int64 end_time = 3;
}

// StreamAnalytics represents stream analytics data
message StreamAnalytics {
  string stream_id = 1;
  uint32 total_viewers = 2;
  uint32 unique_viewers = 3;
  uint32 peak_concurrent_viewers = 4;
  double average_watch_time_minutes = 5;
  double engagement_rate = 6;
  repeated ViewerCountDataPoint viewer_count_timeline = 7;
}

// ViewerCountDataPoint represents viewership at a point in time
message ViewerCountDataPoint {
  int64 timestamp = 1;
  uint32 viewer_count = 2;
}

// BroadcastChatMessageRequest sends a message to stream chat
message BroadcastChatMessageRequest {
  string stream_id = 1;
  string user_id = 2;
  string user_name = 3;
  string message = 4;
}

// BroadcastChatMessageResponse confirms message delivery
message BroadcastChatMessageResponse {
  string message_id = 1;
  bool success = 2;
  int64 timestamp = 3;
}

// GetStreamAnalyticsResponse contains analytics data
message GetStreamAnalyticsResponse {
  StreamAnalytics analytics = 1;
}
