syntax = "proto3";

package nova.messaging;

// Messaging Service - gRPC interface for conversation and message operations
// Serves messaging-service (port 8083)

// ============================================================================
// Message Models
// ============================================================================

message Message {
    string id = 1;
    string conversation_id = 2;
    string sender_id = 3;
    string content = 4;
    bytes content_encrypted = 5;
    bytes content_nonce = 6;
    int32 encryption_version = 7;
    int64 sequence_number = 8;
    string idempotency_key = 9;
    int64 created_at = 10;
    int64 updated_at = 11;
    int64 deleted_at = 12;
    int32 reaction_count = 13;
}

message Conversation {
    string id = 1;
    string kind = 2;  // "direct" or "group"
    string name = 3;  // Only for groups
    string description = 4;  // Only for groups
    string avatar_url = 5;
    int32 member_count = 6;
    string privacy_mode = 7;  // "public" or "private"
    string last_message_id = 8;
    int64 created_at = 9;
    int64 updated_at = 10;
}

message ConversationMember {
    string user_id = 1;
    string role = 2;  // "owner", "admin", "member"
    int64 joined_at = 3;
}

message MessageReaction {
    string id = 1;
    string message_id = 2;
    string user_id = 3;
    string emoji = 4;
    int64 created_at = 5;
}

message ConversationEncryption {
    string conversation_id = 1;
    int32 encryption_version = 2;  // 1=symmetric, 2=E2EE
    string cipher_type = 3;  // "AES-256-GCM"
    int32 nonce_size = 4;
    int64 created_at = 5;
}

// ============================================================================
// Request/Response Types
// ============================================================================

// === Message Operations ===

message SendMessageRequest {
    string conversation_id = 1;
    string sender_id = 2;
    string content = 3;
    bytes content_encrypted = 4;
    bytes content_nonce = 5;
    int32 encryption_version = 6;
    string idempotency_key = 7;
}

message SendMessageResponse {
    Message message = 1;
    string error = 2;
}

message GetMessageRequest {
    string message_id = 1;
}

message GetMessageResponse {
    Message message = 1;
    bool found = 2;
    string error = 3;
}

message GetMessageHistoryRequest {
    string conversation_id = 1;
    int32 limit = 2;
    int64 before_timestamp = 3;
    string cursor = 4;
}

message GetMessageHistoryResponse {
    repeated Message messages = 1;
    string next_cursor = 2;
    bool has_more = 3;
    string error = 4;
}

message UpdateMessageRequest {
    string message_id = 1;
    string conversation_id = 2;
    string content = 3;
    bytes content_encrypted = 4;
    bytes content_nonce = 5;
}

message UpdateMessageResponse {
    Message message = 1;
    string error = 2;
}

message DeleteMessageRequest {
    string message_id = 1;
}

message DeleteMessageResponse {
    bool success = 1;
    string error = 2;
}

message SearchMessagesRequest {
    string conversation_id = 1;
    string query = 2;
    int32 limit = 3;
    int32 offset = 4;
}

message SearchMessagesResponse {
    repeated Message messages = 1;
    int32 total = 2;
    string error = 3;
}

// === Conversation Operations ===

message CreateConversationRequest {
    string creator_id = 1;
    repeated string member_ids = 2;
    string kind = 3;  // "direct" or "group"
    string name = 4;  // For groups only
    string description = 5;
    string avatar_url = 6;
    string privacy_mode = 7;  // "public" or "private"
}

message CreateConversationResponse {
    Conversation conversation = 1;
    string error = 2;
}

message GetConversationRequest {
    string conversation_id = 1;
}

message GetConversationResponse {
    Conversation conversation = 1;
    bool found = 2;
    string error = 3;
}

message ListUserConversationsRequest {
    string user_id = 1;
    int32 limit = 2;
    string cursor = 3;
}

message ListUserConversationsResponse {
    repeated Conversation conversations = 1;
    string next_cursor = 2;
    bool has_more = 3;
    string error = 4;
}

message DeleteConversationRequest {
    string conversation_id = 1;
}

message DeleteConversationResponse {
    bool success = 1;
    string error = 2;
}

message MarkAsReadRequest {
    string conversation_id = 1;
    string user_id = 2;
    string last_message_id = 3;
}

message MarkAsReadResponse {
    bool success = 1;
    string error = 2;
}

message GetUnreadCountRequest {
    string user_id = 1;
}

message GetUnreadCountResponse {
    int32 total = 1;
    map<string, int32> by_conversation = 2;  // conversation_id -> count
    string error = 3;
}

// === Group Management ===

message AddMemberRequest {
    string conversation_id = 1;
    string user_id = 2;
}

message AddMemberResponse {
    bool success = 1;
    string error = 2;
}

message RemoveMemberRequest {
    string conversation_id = 1;
    string user_id = 2;
}

message RemoveMemberResponse {
    bool success = 1;
    string error = 2;
}

message ListMembersRequest {
    string conversation_id = 1;
    int32 limit = 2;
    string cursor = 3;
}

message ListMembersResponse {
    repeated ConversationMember members = 1;
    string next_cursor = 2;
    bool has_more = 3;
    string error = 4;
}

message UpdateMemberRoleRequest {
    string conversation_id = 1;
    string user_id = 2;
    string role = 3;  // "owner", "admin", "member"
}

message UpdateMemberRoleResponse {
    bool success = 1;
    string error = 2;
}

message LeaveGroupRequest {
    string conversation_id = 1;
    string user_id = 2;
}

message LeaveGroupResponse {
    bool success = 1;
    string error = 2;
}

// === Reactions ===

message AddReactionRequest {
    string message_id = 1;
    string user_id = 2;
    string emoji = 3;
}

message AddReactionResponse {
    MessageReaction reaction = 1;
    string error = 2;
}

message GetReactionsRequest {
    string message_id = 1;
}

message GetReactionsResponse {
    repeated MessageReaction reactions = 1;
    string error = 2;
}

message RemoveReactionRequest {
    string message_id = 1;
    string user_id = 2;
    string emoji = 3;
}

message RemoveReactionResponse {
    bool success = 1;
    string error = 2;
}

// === Encryption & Key Exchange ===

message StoreDevicePublicKeyRequest {
    string user_id = 1;
    string device_id = 2;
    string public_key = 3;  // Base64 encoded
}

message StoreDevicePublicKeyResponse {
    bool success = 1;
    string error = 2;
}

message GetPeerPublicKeyRequest {
    string conversation_id = 1;
    string peer_user_id = 2;
    string peer_device_id = 3;
}

message GetPeerPublicKeyResponse {
    string peer_user_id = 1;
    string peer_device_id = 2;
    string peer_public_key = 3;  // Base64 encoded
    int64 created_at = 4;
    string error = 5;
}

message CompleteKeyExchangeRequest {
    string conversation_id = 1;
    string peer_user_id = 2;
    string shared_secret_hash = 3;  // Base64 encoded
}

message CompleteKeyExchangeResponse {
    string conversation_id = 1;
    int32 encryption_version = 2;
    int64 key_exchange_count = 3;
    int64 last_exchange_at = 4;
    string error = 5;
}

message GetConversationEncryptionRequest {
    string conversation_id = 1;
}

message GetConversationEncryptionResponse {
    ConversationEncryption encryption = 1;
    string error = 2;
}

// === Push Notifications ===

message RegisterDeviceTokenRequest {
    string user_id = 1;
    string device_id = 2;
    string device_token = 3;
    string platform = 4;  // "ios" or "android"
}

message RegisterDeviceTokenResponse {
    bool success = 1;
    string error = 2;
}

message SendPushNotificationRequest {
    string device_token = 1;
    string platform = 2;  // "ios" or "android"
    string title = 3;
    string body = 4;
    int32 badge = 5;
}

message SendPushNotificationResponse {
    bool success = 1;
    string message_id = 2;
    string error = 3;
}

// === Offline Queue (for WebSocket reconnections) ===

message OfflineQueueEvent {
    string id = 1;
    string user_id = 2;
    string event_type = 3;
    string data = 4;  // JSON serialized
    int64 created_at = 5;
    bool processed = 6;
}

message GetOfflineEventsRequest {
    string user_id = 1;
    int32 limit = 2;
}

message GetOfflineEventsResponse {
    repeated OfflineQueueEvent events = 1;
    string error = 2;
}

message AckOfflineEventRequest {
    string event_id = 1;
}

message AckOfflineEventResponse {
    bool success = 1;
    string error = 2;
}

// ============================================================================
// Service Definitions
// ============================================================================

service MessagingService {
    // Message operations
    rpc SendMessage(SendMessageRequest) returns (SendMessageResponse) {}
    rpc GetMessage(GetMessageRequest) returns (GetMessageResponse) {}
    rpc GetMessageHistory(GetMessageHistoryRequest) returns (GetMessageHistoryResponse) {}
    rpc UpdateMessage(UpdateMessageRequest) returns (UpdateMessageResponse) {}
    rpc DeleteMessage(DeleteMessageRequest) returns (DeleteMessageResponse) {}
    rpc SearchMessages(SearchMessagesRequest) returns (SearchMessagesResponse) {}

    // Conversation operations
    rpc CreateConversation(CreateConversationRequest) returns (CreateConversationResponse) {}
    rpc GetConversation(GetConversationRequest) returns (GetConversationResponse) {}
    rpc ListUserConversations(ListUserConversationsRequest) returns (ListUserConversationsResponse) {}
    rpc DeleteConversation(DeleteConversationRequest) returns (DeleteConversationResponse) {}
    rpc MarkAsRead(MarkAsReadRequest) returns (MarkAsReadResponse) {}
    rpc GetUnreadCount(GetUnreadCountRequest) returns (GetUnreadCountResponse) {}

    // Group management
    rpc AddMember(AddMemberRequest) returns (AddMemberResponse) {}
    rpc RemoveMember(RemoveMemberRequest) returns (RemoveMemberResponse) {}
    rpc ListMembers(ListMembersRequest) returns (ListMembersResponse) {}
    rpc UpdateMemberRole(UpdateMemberRoleRequest) returns (UpdateMemberRoleResponse) {}
    rpc LeaveGroup(LeaveGroupRequest) returns (LeaveGroupResponse) {}

    // Message reactions
    rpc AddReaction(AddReactionRequest) returns (AddReactionResponse) {}
    rpc GetReactions(GetReactionsRequest) returns (GetReactionsResponse) {}
    rpc RemoveReaction(RemoveReactionRequest) returns (RemoveReactionResponse) {}

    // Encryption & key exchange
    rpc StoreDevicePublicKey(StoreDevicePublicKeyRequest) returns (StoreDevicePublicKeyResponse) {}
    rpc GetPeerPublicKey(GetPeerPublicKeyRequest) returns (GetPeerPublicKeyResponse) {}
    rpc CompleteKeyExchange(CompleteKeyExchangeRequest) returns (CompleteKeyExchangeResponse) {}
    rpc GetConversationEncryption(GetConversationEncryptionRequest) returns (GetConversationEncryptionResponse) {}

    // Push notifications
    rpc RegisterDeviceToken(RegisterDeviceTokenRequest) returns (RegisterDeviceTokenResponse) {}
    rpc SendPushNotification(SendPushNotificationRequest) returns (SendPushNotificationResponse) {}

    // Offline queue management
    rpc GetOfflineEvents(GetOfflineEventsRequest) returns (GetOfflineEventsResponse) {}
    rpc AckOfflineEvent(AckOfflineEventRequest) returns (AckOfflineEventResponse) {}
}
