# Nginx-RTMP Configuration for Live Streaming
# Based on nginx-rtmp-module: https://github.com/arut/nginx-rtmp-module

worker_processes auto;
rtmp_auto_push on;

events {
    worker_connections 1024;
}

# =============================================================================
# RTMP Server Configuration
# =============================================================================
rtmp {
    server {
        listen 1935;
        chunk_size 4096;  # RTMP chunk size (default 4096, smaller = lower latency)

        # Timeout settings
        timeout 30s;
        ping 30s;
        ping_timeout 30s;

        # =======================================================================
        # Live Application (RTMP Ingestion)
        # =======================================================================
        application live {
            # Enable live streaming
            live on;

            # Disable recording by default (use auto_archive setting in DB)
            record off;

            # ===================================================================
            # Authentication Webhook
            # ===================================================================
            # Nginx calls this URL when creator starts publishing
            # Expected response:
            #   - HTTP 200 OK -> Allow stream
            #   - HTTP 403 Forbidden -> Reject stream
            on_publish http://user-service:8080/api/v1/streams/auth;

            # Called when creator stops publishing
            on_publish_done http://user-service:8080/api/v1/streams/done;

            # ===================================================================
            # HLS Output Configuration
            # ===================================================================
            # Enable HLS transcoding
            hls on;

            # HLS output directory (shared volume with hls-origin)
            hls_path /tmp/hls;

            # HLS segment duration (2 seconds for low latency)
            # Trade-off: Smaller segments = more HTTP requests, but lower latency
            hls_fragment 2s;

            # HLS playlist length (10 seconds = 5 segments)
            # Viewers buffer 5 segments before playback
            hls_playlist_length 10s;

            # HLS fragment naming
            # Example: /tmp/hls/{stream_key}/seg-1234567890-0.ts
            hls_fragment_naming timestamp;

            # Nested HLS playlists (one directory per stream)
            hls_nested on;

            # HLS cleanup (delete old segments)
            hls_cleanup on;

            # ===================================================================
            # Transcoding (Optional Multi-Bitrate)
            # ===================================================================
            # Phase 7B: Single bitrate (creator's input bitrate)
            # Phase 8: Adaptive bitrate (ABR) with multiple quality variants

            # For Phase 8 ABR, uncomment:
            # exec ffmpeg -i rtmp://localhost/$app/$name
            #   -c:v libx264 -b:v 4000k -s 1920x1080 -f flv rtmp://localhost/hls/$name_1080p
            #   -c:v libx264 -b:v 2500k -s 1280x720  -f flv rtmp://localhost/hls/$name_720p
            #   -c:v libx264 -b:v 1000k -s 854x480   -f flv rtmp://localhost/hls/$name_480p;

            # ===================================================================
            # Connection Limits (DDoS Protection)
            # ===================================================================
            # Max 1 publisher per stream key (prevent hijacking)
            max_connections 1000;  # Total RTMP connections

            # Drop idle connections (no data for 10 seconds)
            drop_idle_publisher 10s;

            # ===================================================================
            # Sync (Audio/Video Synchronization)
            # ===================================================================
            sync 10ms;  # Max A/V sync drift

            # ===================================================================
            # Metadata
            # ===================================================================
            # Inject metadata into stream
            meta copy;  # Copy metadata from source stream
        }

        # =======================================================================
        # HLS Application (Post-Transcoding, if ABR enabled)
        # =======================================================================
        # 注意：nginx-rtmp 不允許多個 application 使用相同的 hls_path。
        # 此應用在單碼率階段不會被使用，為避免與 live 應用的 /tmp/hls 衝突，改用不同目錄。
        application hls {
            live on;
            hls on;
            hls_path /tmp/hls_abr;
            hls_fragment 2s;
            hls_playlist_length 10s;
            hls_nested on;
            hls_cleanup on;
        }
    }
}

# =============================================================================
# HTTP Server Configuration (Stats Endpoint)
# =============================================================================
http {
    server {
        listen 8080;

        # RTMP stats XML endpoint
        # Example: http://nginx-rtmp:8080/stat
        location /stat {
            rtmp_stat all;
            rtmp_stat_stylesheet stat.xsl;

            # CORS headers (allow monitoring from web UI)
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, OPTIONS' always;
        }

        # XSL stylesheet for human-readable stats
        location /stat.xsl {
            root /usr/local/nginx/html;
        }

        # Health check endpoint
        location /health {
            access_log off;
            return 200 "OK\n";
            add_header Content-Type text/plain;
        }
    }
}

# =============================================================================
# Logging Configuration
# =============================================================================
# RTMP access logs are written to stdout (captured by Docker)
# Format: {timestamp} {client_ip} {stream_key} {action} {bytes_sent} {bytes_received}

# =============================================================================
# Performance Tuning
# =============================================================================
# worker_processes auto;         # Use all CPU cores
# worker_rlimit_nofile 65535;    # Max open file descriptors
# rtmp_auto_push on;             # Auto-push to slave servers (if clustering)

# =============================================================================
# Expected Environment Variables (from Docker Compose)
# =============================================================================
# RTMP_AUTH_URL - Webhook URL for stream authentication
# RTMP_DONE_URL - Webhook URL for stream completion

# =============================================================================
# Example OBS Studio Configuration (for creators)
# =============================================================================
# Stream Settings:
#   Server: rtmp://stream.nova.com/live
#   Stream Key: {stream_key from API}
#
# Output Settings:
#   Video Bitrate: 2500 kbps
#   Audio Bitrate: 128 kbps
#   Encoder: x264
#   Rate Control: CBR (Constant Bitrate)
#   Keyframe Interval: 2 seconds
#   Preset: veryfast
#   Profile: main
#
# Video Settings:
#   Base Resolution: 1920x1080
#   Output Resolution: 1920x1080
#   FPS: 30
#
# Audio Settings:
#   Sample Rate: 44.1 kHz
#   Channels: Stereo
