# Nova API Gateway - Nginx Reverse Proxy Configuration
#
# This configuration provides a unified entry point for all Nova backend services.
# All services are accessible through port 3000 with proper routing.
#
# Service Mapping:
# - user-service:8080              -> /api/v1/auth/*, /api/v1/users/*, /api/v1/posts/*, etc.
# - auth-service:8080              -> /api/v1/auth/*
# - content-service:8081           -> /api/v1/posts/*, /api/v1/comments/*, /api/v1/feed/*
# - messaging-service:3000         -> /api/v1/conversations/*, /api/v1/messages/*
# - search-service:8086            -> /api/v1/search/*
# - recommendation-service:8000    -> /api/v1/recommendations/*, /api/v1/trending/*
#
# Unified entry point: http://localhost:3000

# Upstream service definitions
upstream user_service {
    server user-service:8080 max_fails=2 fail_timeout=10s;
    keepalive 32;
}

upstream auth_service {
    server auth-service:8080 max_fails=2 fail_timeout=10s;
    keepalive 32;
}

upstream content_service {
    server content-service:8081 max_fails=2 fail_timeout=10s;
    keepalive 32;
}

upstream messaging_service {
    server messaging-service:3000 max_fails=2 fail_timeout=10s;
    keepalive 32;
}

upstream search_service {
    server search-service:8086 max_fails=2 fail_timeout=10s;
    keepalive 32;
}

upstream recommendation_service {
    server recommendation-service:8000 max_fails=2 fail_timeout=10s;
    keepalive 32;
}

# Split traffic for canary deployment
# 70% to content_service (new), 30% to user_service (legacy)
split_clients $remote_addr $content_backend {
    70% "content_service";
    30% "user_service";
}

# Rate limiting zones
limit_req_zone $binary_remote_addr zone=api_limit:10m rate=100r/s;
limit_req_zone $binary_remote_addr zone=search_limit:10m rate=20r/s;
limit_req_zone $binary_remote_addr zone=auth_register_limit:10m rate=10r/m;
limit_req_zone $binary_remote_addr zone=auth_login_limit:10m rate=5r/m;
limit_req_zone $binary_remote_addr zone=recommendations_limit:10m rate=50r/s;

# JWT validation - extract token from Authorization header
# Format: Authorization: Bearer <token>
map $http_authorization $token {
    default "";
    "Bearer ~^(?<token>.+)$" $token;
}

# JWT validation status
map $jwt_validation_result $jwt_valid {
    default "invalid";
    "1" "valid";
}

# HTTP redirect to HTTPS
server {
    listen 80;
    server_name _;

    if ($scheme = http) {
        return 301 https://$host$request_uri;
    }
}

# Main server block
server {
    listen 443 ssl http2;
    server_name _;

    ssl_certificate     /etc/nginx/certs/tls.crt;
    ssl_certificate_key /etc/nginx/certs/tls.key;
    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:10m;
    ssl_session_tickets off;

    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "no-referrer-when-downgrade" always;

    # Logging
    access_log /var/log/nginx/nova-api.access.log combined;
    error_log /var/log/nginx/nova-api.error.log warn;

    # Client body size limits
    client_max_body_size 100M;
    client_body_buffer_size 1M;

    # Timeouts
    proxy_connect_timeout 60s;
    proxy_send_timeout 60s;
    proxy_read_timeout 60s;

    # ============================================
    # Health Check Endpoints
    # ============================================

    location /health {
        access_log off;
        return 200 "OK\n";
        add_header Content-Type text/plain;
    }

    # ============================================
    # Authentication & Authorization (auth-service)
    # ============================================

    # 公开认证端点 (无需 JWT)
    location ~ ^/api/v1/auth/(register)$ {
        limit_req zone=auth_register_limit burst=2 nodelay;
        proxy_pass http://auth_service;
        proxy_http_version 1.1;

        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Request-ID $request_id;
    }

    location ~ ^/api/v1/auth/(login|reset-password|refresh-token)$ {
        limit_req zone=auth_login_limit burst=1 nodelay;

        proxy_pass http://auth_service;
        proxy_http_version 1.1;

        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Request-ID $request_id;
    }

    location ~ ^/api/v1/auth/(logout|verify-email|forgot-password)$ {
        limit_req zone=api_limit burst=20 nodelay;

        proxy_pass http://auth_service;
        proxy_http_version 1.1;

        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Request-ID $request_id;
    }

    # 受保护的认证端点 (需要 JWT)
    location ~ ^/api/v1/auth/ {
        limit_req zone=api_limit burst=20 nodelay;

        # JWT 验证：检查 Authorization header
        if ($http_authorization = "") {
            return 401 '{"error": "Unauthorized", "message": "Missing Authorization header"}\n';
        }

        if ($token = "") {
            return 401 '{"error": "Unauthorized", "message": "Invalid Authorization header format. Use: Bearer <token>"}\n';
        }

        proxy_pass http://auth_service;
        proxy_http_version 1.1;

        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Request-ID $request_id;
        proxy_set_header Authorization $http_authorization;
    }

    location /api/v1/users/ {
        limit_req zone=api_limit burst=20 nodelay;

        # JWT 验证 - 用户相关端点需要认证
        if ($http_authorization = "") {
            return 401 '{"error": "Unauthorized", "message": "Missing Authorization header"}\n';
        }

        proxy_pass http://user_service;
        proxy_http_version 1.1;

        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Request-ID $request_id;
        proxy_set_header Authorization $http_authorization;
    }

    location /api/v1/posts/ {
        limit_req zone=api_limit burst=20 nodelay;

        # JWT 验证 - 发布/修改帖子需要认证
        if ($http_authorization = "") {
            return 401 '{"error": "Unauthorized", "message": "Missing Authorization header"}\n';
        }

        # Canary deployment: 70% to content-service, 30% to user-service
        proxy_pass http://$content_backend;
        proxy_http_version 1.1;

        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Request-ID $request_id;
        proxy_set_header Authorization $http_authorization;
        # Add canary deployment tracking header
        proxy_set_header X-Canary-Deployment "content-service-v1";
    }

    location /api/v1/comments/ {
        limit_req zone=api_limit burst=20 nodelay;

        # JWT 验证 - 评论需要认证
        if ($http_authorization = "") {
            return 401 '{"error": "Unauthorized", "message": "Missing Authorization header"}\n';
        }

        # Canary deployment: 70% to content-service, 30% to user-service
        proxy_pass http://$content_backend;
        proxy_http_version 1.1;

        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Request-ID $request_id;
        proxy_set_header Authorization $http_authorization;
        # Add canary deployment tracking header
        proxy_set_header X-Canary-Deployment "content-service-v1";
    }

    location /api/v1/feed/ {
        limit_req zone=api_limit burst=20 nodelay;

        # JWT 验证 - Feed 需要认证
        if ($http_authorization = "") {
            return 401 '{"error": "Unauthorized", "message": "Missing Authorization header"}\n';
        }

        proxy_pass http://content_service;
        proxy_http_version 1.1;

        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Request-ID $request_id;
        proxy_set_header Authorization $http_authorization;
    }

    # ============================================
    # Recommendations (recommendation-service)
    # ============================================

    # GET /api/v1/recommendations - Get personalized recommendations
    location ~ ^/api/v1/recommendations/?$ {
        limit_req zone=recommendations_limit burst=10 nodelay;

        # JWT 验证 - 推荐需要认证
        if ($http_authorization = "") {
            return 401 '{"error": "Unauthorized", "message": "Missing Authorization header"}\n';
        }

        # Only allow GET and HEAD methods
        if ($request_method !~ ^(GET|HEAD)$) {
            return 405 '{"error": "Method Not Allowed", "message": "Only GET requests are allowed"}\n';
        }

        proxy_pass http://recommendation_service;
        proxy_http_version 1.1;

        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Request-ID $request_id;
        proxy_set_header Authorization $http_authorization;
    }

    # GET /api/v1/recommendations/model-info - Get model version info
    location ~ ^/api/v1/recommendations/model-info/?$ {
        limit_req zone=api_limit burst=20 nodelay;

        # JWT 验证 - 获取模型信息需要认证
        if ($http_authorization = "") {
            return 401 '{"error": "Unauthorized", "message": "Missing Authorization header"}\n';
        }

        # Only allow GET and HEAD methods
        if ($request_method !~ ^(GET|HEAD)$) {
            return 405 '{"error": "Method Not Allowed", "message": "Only GET requests are allowed"}\n';
        }

        proxy_pass http://recommendation_service;
        proxy_http_version 1.1;

        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Request-ID $request_id;
        proxy_set_header Authorization $http_authorization;
    }

    # POST /api/v1/recommendations/rank - Internal ranking API
    location ~ ^/api/v1/recommendations/rank/?$ {
        limit_req zone=api_limit burst=10 nodelay;

        # Internal service-to-service only - check for service token
        if ($http_x_service_token = "") {
            return 401 '{"error": "Unauthorized", "message": "Missing x-service-token header"}\n';
        }

        # Only allow POST and HEAD methods
        if ($request_method !~ ^(POST|HEAD)$) {
            return 405 '{"error": "Method Not Allowed", "message": "Only POST requests are allowed"}\n';
        }

        proxy_pass http://recommendation_service;
        proxy_http_version 1.1;

        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Request-ID $request_id;
        proxy_set_header X-Service-Token $http_x_service_token;
    }

    # POST /api/v1/recommendations/semantic-search - Semantic search using Milvus vectors
    location ~ ^/api/v1/recommendations/semantic-search/?$ {
        limit_req zone=recommendations_limit burst=10 nodelay;

        # Internal service-to-service only - check for service token
        if ($http_x_service_token = "") {
            return 401 '{"error": "Unauthorized", "message": "Missing x-service-token header"}\n';
        }

        # Only allow POST and HEAD methods
        if ($request_method !~ ^(POST|HEAD)$) {
            return 405 '{"error": "Method Not Allowed", "message": "Only POST requests are allowed"}\n';
        }

        proxy_pass http://recommendation_service;
        proxy_http_version 1.1;

        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Request-ID $request_id;
        proxy_set_header X-Service-Token $http_x_service_token;
    }

    location /api/v1/stories/ {
        limit_req zone=api_limit burst=20 nodelay;

        # JWT 验证 - 故事需要认证
        if ($http_authorization = "") {
            return 401 '{"error": "Unauthorized", "message": "Missing Authorization header"}\n';
        }

        proxy_pass http://user_service;
        proxy_http_version 1.1;

        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Request-ID $request_id;
        proxy_set_header Authorization $http_authorization;
        # proxy_set_header Connection "";
    }

    location /api/v1/videos/ {
        limit_req zone=api_limit burst=10 nodelay;

        # JWT 验证 - 视频需要认证
        if ($http_authorization = "") {
            return 401 '{"error": "Unauthorized", "message": "Missing Authorization header"}\n';
        }

        proxy_pass http://user_service;
        proxy_http_version 1.1;

        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Request-ID $request_id;
        proxy_set_header Authorization $http_authorization;
        # proxy_set_header Connection "";

        # Larger timeout for video processing
        proxy_read_timeout 300s;
    }

    location /api/v1/uploads/ {
        limit_req zone=api_limit burst=10 nodelay;

        # JWT 验证 - 上传需要认证
        if ($http_authorization = "") {
            return 401 '{"error": "Unauthorized", "message": "Missing Authorization header"}\n';
        }

        proxy_pass http://user_service;
        proxy_http_version 1.1;

        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Request-ID $request_id;
        proxy_set_header Authorization $http_authorization;
        # proxy_set_header Connection "";

        # Larger timeout for uploads
        proxy_read_timeout 300s;
        client_max_body_size 500M;
    }

    location /api/v1/streams/ {
        limit_req zone=api_limit burst=20 nodelay;

        # JWT 验证 - 直播流需要认证
        if ($http_authorization = "") {
            return 401 '{"error": "Unauthorized", "message": "Missing Authorization header"}\n';
        }

        proxy_pass http://user_service;
        proxy_http_version 1.1;

        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Request-ID $request_id;
        proxy_set_header Authorization $http_authorization;
        # proxy_set_header Connection "";
    }

    location /api/v1/discover/ {
        limit_req zone=api_limit burst=20 nodelay;

        # JWT 验证 - 发现页面需要认证
        if ($http_authorization = "") {
            return 401 '{"error": "Unauthorized", "message": "Missing Authorization header"}\n';
        }

        proxy_pass http://user_service;
        proxy_http_version 1.1;

        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Request-ID $request_id;
        proxy_set_header Authorization $http_authorization;
        # proxy_set_header Connection "";
    }

    location /api/v1/trending {
        limit_req zone=api_limit burst=20 nodelay;

        # JWT 验证 - 热门趋势需要认证
        if ($http_authorization = "") {
            return 401 '{"error": "Unauthorized", "message": "Missing Authorization header"}\n';
        }

        proxy_pass http://user_service;
        proxy_http_version 1.1;

        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Request-ID $request_id;
        proxy_set_header Authorization $http_authorization;
        # proxy_set_header Connection "";
    }

    location /api/v1/events/ {
        limit_req zone=api_limit burst=50 nodelay;

        # JWT 验证 - 事件需要认证
        if ($http_authorization = "") {
            return 401 '{"error": "Unauthorized", "message": "Missing Authorization header"}\n';
        }

        proxy_pass http://user_service;
        proxy_http_version 1.1;

        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Request-ID $request_id;
        proxy_set_header Authorization $http_authorization;
        proxy_set_header Connection "";
    }

    location /api/v1/admin/ {
        limit_req zone=api_limit burst=10 nodelay;

        # JWT 验证 - 管理员端点需要认证
        if ($http_authorization = "") {
            return 401 '{"error": "Unauthorized", "message": "Missing Authorization header"}\n';
        }

        proxy_pass http://user_service;
        proxy_http_version 1.1;

        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Request-ID $request_id;
        proxy_set_header Authorization $http_authorization;
        proxy_set_header Connection "";
    }

    # ============================================
    # Messaging Service (messaging-service)
    # ============================================

    location /api/v1/conversations {
        limit_req zone=api_limit burst=20 nodelay;

        # JWT 验证 - 会话需要认证
        if ($http_authorization = "") {
            return 401 '{"error": "Unauthorized", "message": "Missing Authorization header"}\n';
        }

        proxy_pass http://messaging_service;
        proxy_http_version 1.1;

        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Request-ID $request_id;
        proxy_set_header Authorization $http_authorization;
        proxy_set_header Connection "";
    }

    location /api/v1/messages {
        limit_req zone=api_limit burst=20 nodelay;

        # JWT 验证 - 消息需要认证
        if ($http_authorization = "") {
            return 401 '{"error": "Unauthorized", "message": "Missing Authorization header"}\n';
        }

        proxy_pass http://messaging_service;
        proxy_http_version 1.1;

        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Request-ID $request_id;
        proxy_set_header Authorization $http_authorization;
        proxy_set_header Connection "";
    }

    # ============================================
    # Search Service (search-service)
    # ============================================

    location /api/v1/search/ {
        limit_req zone=search_limit burst=10 nodelay;

        # JWT 验证 - 搜索需要认证以提供个性化结果
        if ($http_authorization = "") {
            return 401 '{"error": "Unauthorized", "message": "Missing Authorization header"}\n';
        }

        proxy_pass http://search_service;
        proxy_http_version 1.1;

        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Request-ID $request_id;
        proxy_set_header Authorization $http_authorization;
        proxy_set_header Connection "";
    }

    # ============================================
    # WebSocket Endpoints (messaging-service)
    # ============================================

    # Legacy WebSocket endpoint (kept for backward compatibility)
    location /ws/messaging/ {
        proxy_pass http://messaging_service;
        proxy_http_version 1.1;

        # WebSocket upgrade headers
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";

        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # WebSocket timeouts
        proxy_read_timeout 86400s;
        proxy_send_timeout 86400s;
    }

    # Standard WebSocket endpoint via API Gateway (/api/v1/ws)
    location ~ ^/api/v1/ws {
        limit_req zone=api_limit burst=50 nodelay;

        # JWT 验证 - WebSocket连接需要认证
        if ($http_authorization = "") {
            return 401 '{"error": "Unauthorized", "message": "Missing Authorization header"}\n';
        }

        proxy_pass http://messaging_service;
        proxy_http_version 1.1;

        # WebSocket upgrade headers
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";

        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Request-ID $request_id;
        proxy_set_header Authorization $http_authorization;

        # WebSocket timeouts (1 hour)
        proxy_read_timeout 3600s;
        proxy_send_timeout 3600s;

        # Disable buffering for WebSocket
        proxy_buffering off;
    }

    # ============================================
    # OpenAPI / Swagger Documentation
    # ============================================

    # Unified OpenAPI endpoint (served by API Gateway)
    location = /api/v1/openapi.json {
        default_type application/json;
        alias /etc/nginx/openapi/unified-openapi.json;
    }

    # Service-specific OpenAPI endpoints
    location = /api/v1/openapi/user-service.json {
        proxy_pass http://user_service/api/v1/openapi.json;
        proxy_http_version 1.1;

        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    location = /api/v1/openapi/messaging-service.json {
        proxy_pass http://messaging_service/openapi.json;
        proxy_http_version 1.1;

        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    location = /api/v1/openapi/search-service.json {
        proxy_pass http://search_service/openapi.json;
        proxy_http_version 1.1;

        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # Swagger UI (proxied to user-service)
    location /swagger-ui/ {
        proxy_pass http://user_service;
        proxy_http_version 1.1;

        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Connection "";
    }

    # Documentation landing page
    location /docs {
        proxy_pass http://user_service;
        proxy_http_version 1.1;

        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Connection "";
    }

    # ============================================
    # JWKS & Well-Known Endpoints
    # ============================================

    location /.well-known/ {
        proxy_pass http://user_service;
        proxy_http_version 1.1;

        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Connection "";
    }

    # ============================================
    # Prometheus Metrics (user-service)
    # ============================================

    location /metrics {
        proxy_pass http://user_service;
        proxy_http_version 1.1;

        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Connection "";

        # Restrict access in production
        # allow 10.0.0.0/8;
        # deny all;
    }

    # ============================================
    # Default / Catch-all
    # ============================================

    location / {
        return 404 '{"error": "Endpoint not found", "message": "Please check API documentation at /docs"}\n';
        add_header Content-Type application/json;
    }
}
