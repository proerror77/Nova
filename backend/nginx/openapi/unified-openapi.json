{
  "openapi": "3.0.3",
  "info": {
    "title": "Nova API - Unified Gateway",
    "description": "Unified API documentation for all Nova backend services. This gateway aggregates user-service, messaging-service, and search-service under a single endpoint.\n\n## Service Architecture\n\n- **user-service** (8080): Authentication, user management, posts, videos, stories, streams\n- **messaging-service** (3000): Conversations and direct messaging\n- **search-service** (8086): Search operations for users, posts, and hashtags\n\n## API Entry Point\n\nAll services are accessible through: `http://localhost:3000/api/v1/`\n\n## Service-Specific Documentation\n\nFor detailed API documentation of each service, visit:\n\n- [User Service OpenAPI](/api/v1/openapi/user-service.json)\n- [Messaging Service OpenAPI](/api/v1/openapi/messaging-service.json)\n- [Search Service OpenAPI](/api/v1/openapi/search-service.json)\n\n## Authentication\n\nMost endpoints require JWT authentication. Include the token in the Authorization header:\n\n```\nAuthorization: Bearer <your_jwt_token>\n```\n\nObtain tokens via `/api/v1/auth/login` or `/api/v1/auth/register`.",
    "version": "1.0.0",
    "contact": {
      "name": "Nova API Support",
      "url": "https://github.com/yourorg/nova"
    }
  },
  "servers": [
    {
      "url": "http://localhost:3000",
      "description": "Local development API gateway"
    },
    {
      "url": "http://localhost:8080",
      "description": "Direct user-service access (bypass gateway)"
    },
    {
      "url": "http://localhost:8085",
      "description": "Direct messaging-service access (bypass gateway)"
    },
    {
      "url": "http://localhost:8086",
      "description": "Direct search-service access (bypass gateway)"
    }
  ],
  "tags": [
    {
      "name": "Authentication",
      "description": "User authentication and authorization endpoints (user-service)",
      "externalDocs": {
        "url": "/api/v1/openapi/user-service.json"
      }
    },
    {
      "name": "Users",
      "description": "User profile and management endpoints (user-service)",
      "externalDocs": {
        "url": "/api/v1/openapi/user-service.json"
      }
    },
    {
      "name": "Posts",
      "description": "Post creation and management (user-service)",
      "externalDocs": {
        "url": "/api/v1/openapi/user-service.json"
      }
    },
    {
      "name": "Videos",
      "description": "Video upload and streaming (user-service)",
      "externalDocs": {
        "url": "/api/v1/openapi/user-service.json"
      }
    },
    {
      "name": "Stories",
      "description": "Ephemeral stories (user-service)",
      "externalDocs": {
        "url": "/api/v1/openapi/user-service.json"
      }
    },
    {
      "name": "Live Streams",
      "description": "Live streaming endpoints (user-service)",
      "externalDocs": {
        "url": "/api/v1/openapi/user-service.json"
      }
    },
    {
      "name": "Feed",
      "description": "Personalized content feed (content-service)",
      "externalDocs": {
        "url": "/api/v1/openapi/content-service.json"
      }
    },
    {
      "name": "Conversations",
      "description": "Direct messaging conversations (messaging-service)",
      "externalDocs": {
        "url": "/api/v1/openapi/messaging-service.json"
      }
    },
    {
      "name": "Messages",
      "description": "Direct messages within conversations (messaging-service)",
      "externalDocs": {
        "url": "/api/v1/openapi/messaging-service.json"
      }
    },
    {
      "name": "Search",
      "description": "Search operations for users, posts, and hashtags (search-service)",
      "externalDocs": {
        "url": "/api/v1/openapi/search-service.json"
      }
    }
  ],
  "paths": {
    "/api/v1/auth/login": {
      "post": {
        "tags": ["Authentication"],
        "summary": "User login",
        "description": "Authenticate user with email/username and password. Returns JWT access and refresh tokens.",
        "operationId": "login",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["identifier", "password"],
                "properties": {
                  "identifier": {
                    "type": "string",
                    "description": "Email or username"
                  },
                  "password": {
                    "type": "string",
                    "format": "password"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "access_token": { "type": "string" },
                    "refresh_token": { "type": "string" },
                    "user": { "type": "object" }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/search/users": {
      "get": {
        "tags": ["Search"],
        "summary": "Search users",
        "description": "Search for users by username, display name, or bio. Handled by search-service.",
        "operationId": "searchUsers",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "required": true,
            "schema": { "type": "string", "minLength": 2 },
            "description": "Search query (minimum 2 characters)"
          },
          {
            "name": "limit",
            "in": "query",
            "schema": { "type": "integer", "default": 20, "maximum": 100 },
            "description": "Maximum number of results"
          }
        ],
        "responses": {
          "200": {
            "description": "Search results",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "query": { "type": "string" },
                    "results": {
                      "type": "array",
                      "items": { "type": "object" }
                    },
                    "count": { "type": "integer" }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/search/posts": {
      "get": {
        "tags": ["Search"],
        "summary": "Search posts",
        "description": "Full-text search for posts using PostgreSQL. Handled by search-service.",
        "operationId": "searchPosts",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "required": true,
            "schema": { "type": "string" },
            "description": "Search query"
          },
          {
            "name": "limit",
            "in": "query",
            "schema": { "type": "integer", "default": 20 },
            "description": "Maximum number of results"
          }
        ],
        "responses": {
          "200": {
            "description": "Search results"
          }
        }
      }
    },
    "/api/v1/conversations": {
      "get": {
        "tags": ["Conversations"],
        "summary": "List user conversations",
        "description": "Get all conversations for the authenticated user. Handled by messaging-service.",
        "operationId": "listConversations",
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": {
            "description": "List of conversations"
          }
        }
      }
    },
    "/api/v1/messages": {
      "post": {
        "tags": ["Messages"],
        "summary": "Send a message",
        "description": "Send a message in a conversation. Handled by messaging-service.",
        "operationId": "sendMessage",
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["conversation_id", "content"],
                "properties": {
                  "conversation_id": { "type": "string", "format": "uuid" },
                  "content": { "type": "string" }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Message sent successfully"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "JWT token obtained from /api/v1/auth/login or /api/v1/auth/register"
      }
    }
  }
}
