openapi: 3.0.3
info:
  title: Messaging + Stories API (Phase 7B)
  version: 0.1.0
servers:
  - url: http://localhost:8080
paths:
  /health:
    get:
      summary: Health check
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
                example: OK
  /conversations:
    post:
      summary: Create conversation (direct or group)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/CreateDirectConversationRequest'
                - $ref: '#/components/schemas/CreateGroupConversationRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Conversation'
  /conversations/{id}:
    get:
      summary: Get conversation details
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Conversation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Conversation'
        '404':
          description: Not found
  /conversations/{id}/messages:
    post:
      summary: Send message to conversation
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendMessageRequest'
      responses:
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
    get:
      summary: Get message history for conversation
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
        - in: query
          name: limit
          schema:
            type: integer
            default: 50
        - in: query
          name: before
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Messages
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Message'
  /messages/{id}:
    put:
      summary: Edit message content (15-minute window)
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditMessageRequest'
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
    delete:
      summary: Delete message (soft delete)
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Deleted
components:
  schemas:
    Conversation:
      type: object
      properties:
        id:
          type: string
          format: uuid
        type:
          type: string
          enum: [direct, group]
        name:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        member_count:
          type: integer
        privacy_mode:
          type: string
          enum: [strict_e2e, search_enabled]
        created_at:
          type: string
          format: date-time
    Message:
      type: object
      properties:
        id:
          type: string
          format: uuid
        conversation_id:
          type: string
          format: uuid
        sender_id:
          type: string
          format: uuid
        created_at:
          type: string
          format: date-time
        edited_at:
          type: string
          format: date-time
          nullable: true
        deleted_at:
          type: string
          format: date-time
          nullable: true
        reaction_count:
          type: integer
    CreateDirectConversationRequest:
      type: object
      required: [participant_id]
      properties:
        participant_id: { type: string, format: uuid }
    CreateGroupConversationRequest:
      type: object
      required: [name, members]
      properties:
        name: { type: string }
        description: { type: string }
        members:
          type: array
          minItems: 3
          items: { type: string, format: uuid }
    SendMessageRequest:
      type: object
      required: [content_encrypted, content_nonce]
      properties:
        content_encrypted: { type: string, description: Base64-encoded ciphertext }
        content_nonce: { type: string, description: Base64-encoded nonce }
        idempotency_key: { type: string, format: uuid }
    EditMessageRequest:
      type: object
      required: [content_encrypted, content_nonce]
      properties:
        content_encrypted: { type: string }
        content_nonce: { type: string }

