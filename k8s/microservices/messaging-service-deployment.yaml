---
# Kubernetes Deployment for Nova Messaging Service
# Handles WebSocket connections, real-time messaging, and video call signaling
apiVersion: apps/v1
kind: Deployment
metadata:
  name: messaging-service
  namespace: nova-messaging
  labels:
    app: nova
    component: messaging-service
    version: v1
  annotations:
    description: "Messaging service with WebSocket support for DMs and video call signaling"
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  selector:
    matchLabels:
      app: nova
      component: messaging-service
  template:
    metadata:
      labels:
        app: nova
        component: messaging-service
        version: v1
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
    spec:
      # Pod Security
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        fsGroup: 1001

      # Service Account
      serviceAccountName: messaging-service

      # Init Containers
      initContainers:
        # Wait for database migrations
        - name: db-migrate
          image: migrate/migrate:v4.15.2
          args:
            - "-path"
            - "/migrations"
            - "-database"
            - "postgresql://$(DB_USER):$(DB_PASSWORD)@$(DB_HOST):5432/$(DB_NAME)?sslmode=disable"
            - "up"
          env:
            - name: DB_USER
              valueFrom:
                secretKeyRef:
                  name: messaging-service-secret
                  key: POSTGRES_USER
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: messaging-service-secret
                  key: POSTGRES_PASSWORD
            - name: DB_HOST
              value: "postgres.nova-db"
            - name: DB_NAME
              valueFrom:
                secretKeyRef:
                  name: messaging-service-secret
                  key: POSTGRES_DB
          volumeMounts:
            - name: migrations
              mountPath: /migrations

      # Application Containers
      containers:
        - name: messaging-service
          image: nova/messaging-service:latest
          imagePullPolicy: IfNotPresent

          # Port Configuration
          ports:
            - name: http
              containerPort: 3000
              protocol: TCP
            - name: metrics
              containerPort: 9090
              protocol: TCP

          # Environment Variables
          env:
            # ConfigMap-based config
            - name: APP_ENV
              valueFrom:
                configMapKeyRef:
                  name: messaging-service-config
                  key: APP_ENV
            - name: PORT
              valueFrom:
                configMapKeyRef:
                  name: messaging-service-config
                  key: PORT
            - name: RUST_LOG
              valueFrom:
                configMapKeyRef:
                  name: messaging-service-config
                  key: RUST_LOG
            - name: HOST
              valueFrom:
                configMapKeyRef:
                  name: messaging-service-config
                  key: HOST

            # Database (from Secret)
            - name: DATABASE_URL
              valueFrom:
                secretKeyRef:
                  name: messaging-service-secret
                  key: DATABASE_URL
            - name: DATABASE_MAX_CONNECTIONS
              valueFrom:
                configMapKeyRef:
                  name: messaging-service-config
                  key: DATABASE_MAX_CONNECTIONS

            # Redis (from Secret)
            - name: REDIS_URL
              valueFrom:
                secretKeyRef:
                  name: messaging-service-secret
                  key: REDIS_URL
            - name: REDIS_POOL_SIZE
              valueFrom:
                configMapKeyRef:
                  name: messaging-service-config
                  key: REDIS_POOL_SIZE

            # Kafka
            - name: KAFKA_BROKERS
              valueFrom:
                secretKeyRef:
                  name: messaging-service-secret
                  key: KAFKA_BROKERS

            # JWT
            - name: JWT_PUBLIC_KEY_PEM
              valueFrom:
                secretKeyRef:
                  name: messaging-service-secret
                  key: JWT_PUBLIC_KEY_PEM

            # Encryption
            - name: SECRETBOX_KEY_B64
              valueFrom:
                secretKeyRef:
                  name: messaging-service-secret
                  key: SECRETBOX_KEY_B64

            # Video Call Settings
            - name: VIDEO_CALL_MAX_DURATION_HOURS
              valueFrom:
                configMapKeyRef:
                  name: messaging-service-config
                  key: VIDEO_CALL_MAX_DURATION_HOURS
            - name: VIDEO_CALL_IDLE_TIMEOUT_MINUTES
              valueFrom:
                configMapKeyRef:
                  name: messaging-service-config
                  key: VIDEO_CALL_IDLE_TIMEOUT_MINUTES

            # Pod identity
            - name: HOSTNAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP

          # Resource Requests and Limits
          resources:
            requests:
              cpu: 500m
              memory: 512Mi
            limits:
              cpu: 2000m
              memory: 2Gi

          # Health Checks
          livenessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3

          readinessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 2

          # Startup Probe (for slow starting applications)
          startupProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 0
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 30

          # Security Context
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            capabilities:
              drop:
                - ALL

          # Volume Mounts
          volumeMounts:
            - name: tmp
              mountPath: /tmp
            - name: cache
              mountPath: /app/cache

      # Volumes
      volumes:
        - name: tmp
          emptyDir: {}
        - name: cache
          emptyDir: {}
        - name: migrations
          configMap:
            name: messaging-service-migrations

      # Pod Affinity for high availability
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: component
                      operator: In
                      values:
                        - messaging-service
                topologyKey: kubernetes.io/hostname

      # Termination Grace Period
      terminationGracePeriodSeconds: 30

      # DNS Policy
      dnsPolicy: ClusterFirst
