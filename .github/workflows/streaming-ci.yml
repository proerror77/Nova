name: Streaming CI/CD Pipeline

on:
  # 临时禁用 - GitHub Actions 运行器分配失败
  workflow_dispatch:

permissions:
  contents: read

env:
  RUST_BACKTRACE: 1
  CARGO_TERM_COLOR: always

jobs:
  # ============================================
  # Lint and Format Check
  # ============================================
  lint:
    name: Lint & Format
    concurrency:
      group: streaming-lint-${{ github.ref }}
      cancel-in-progress: true
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
      
      - uses: Swatinem/rust-cache@v2
      
      - name: Run rustfmt
        run: cargo fmt --all -- --check
        continue-on-error: true
        working-directory: backend
      
      - name: Run clippy
        run: cargo clippy --all -- -D warnings
        working-directory: backend

  # ============================================
  # Build
  # ============================================
  build:
    name: Build
    concurrency:
      group: streaming-build-${{ github.ref }}
      cancel-in-progress: true
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - service: user-service
            path: backend/user-service
          - service: messaging-service
            path: backend/messaging-service
          - service: search-service
            path: backend/search-service
    steps:
      - uses: actions/checkout@v5
      
      - uses: dtolnay/rust-toolchain@stable
      
      - uses: Swatinem/rust-cache@v2
      
      - name: Build ${{ matrix.service }}
        run: cargo build --release
        working-directory: ${{ matrix.path }}

  # ============================================
  # Unit & Integration Tests
  # ============================================
  test:
    name: Test
    concurrency:
      group: streaming-test-${{ github.ref }}
      cancel-in-progress: true
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: streaming_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - uses: actions/checkout@v5
      
      - uses: dtolnay/rust-toolchain@stable
      
      - uses: Swatinem/rust-cache@v2
      
      - name: Run tests
        run: cargo test --all -- --test-threads=1
        working-directory: backend
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/streaming_test

  # ============================================
  # Security Audit
  # ============================================
  security:
    name: Security Audit
    concurrency:
      group: streaming-sec-${{ github.ref }}
      cancel-in-progress: true
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      
      - uses: rustsec/audit-check-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          ignore: |
            RUSTSEC-2024-0421
            RUSTSEC-2024-0437
            RUSTSEC-2023-0071
            RUSTSEC-2024-0363

  # ============================================
  # Docker Build & Push
  # ============================================
  docker:
    name: Docker Build
    concurrency:
      group: streaming-docker-${{ github.ref }}
      cancel-in-progress: true
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: [lint, build, test]
    steps:
      - uses: actions/checkout@v5
      
      - uses: docker/setup-buildx-action@v3
      
      - uses: docker/build-push-action@v6
        with:
          context: ./backend
          push: false
          tags: nova:streaming-latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # ============================================
  # Status Check
  # ============================================
  status:
    name: CI Status
    runs-on: ubuntu-latest
    needs: [lint, build, test, security]
    if: always()
    steps:
      - name: Check CI Status
        run: |
          if [ "${{ needs.lint.result }}" != "success" ] || \
             [ "${{ needs.build.result }}" != "success" ] || \
             [ "${{ needs.test.result }}" != "success" ] || \
             [ "${{ needs.security.result }}" != "success" ]; then
            echo "❌ CI Pipeline Failed"
            exit 1
          fi
          echo "✅ CI Pipeline Passed"
