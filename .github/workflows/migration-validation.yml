name: Database Migration Validation

on:
  push:
    branches: [main, develop]
    paths:
      - 'backend/migrations/**'
      - 'backend/**/migrations/**'
  pull_request:
    branches: [main, develop]
    paths:
      - 'backend/migrations/**'
      - 'backend/**/migrations/**'

permissions:
  contents: read

jobs:
  validate-migrations:
    name: Validate Database Migrations
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: nova_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    env:
      DATABASE_URL: postgresql://postgres:postgres@localhost:5432/nova_test
      RUST_BACKTRACE: 1

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install sqlx-cli
        run: cargo install sqlx-cli --no-default-features --features postgres --locked

      - name: Wait for PostgreSQL
        run: |
          for i in {1..30}; do
            pg_isready -h localhost -p 5432 -U postgres && break
            sleep 1
          done

      - name: Run migrations
        working-directory: backend
        run: sqlx migrate run --database-url $DATABASE_URL

      - name: Validate migration reversibility
        working-directory: backend
        run: |
          echo "Testing migration rollback..."
          sqlx migrate revert --database-url $DATABASE_URL
          echo "Re-applying migrations..."
          sqlx migrate run --database-url $DATABASE_URL

      - name: Verify table structure
        run: |
          psql $DATABASE_URL -c "\dt" > schema.txt
          cat schema.txt

          # Check for critical tables
          psql $DATABASE_URL -c "SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' ORDER BY table_name;" | tee tables.txt

          # Verify constraints
          psql $DATABASE_URL -c "
            SELECT
              tc.table_name,
              tc.constraint_name,
              tc.constraint_type
            FROM information_schema.table_constraints tc
            WHERE tc.table_schema = 'public'
            ORDER BY tc.table_name, tc.constraint_type;
          " | tee constraints.txt

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v5
        with:
          name: database-schema
          path: |
            schema.txt
            tables.txt
            constraints.txt
          retention-days: 7

  migration-idempotency:
    name: Test Migration Idempotency
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: nova_test_idempotent
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    env:
      DATABASE_URL: postgresql://postgres:postgres@localhost:5432/nova_test_idempotent

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install sqlx-cli
        run: cargo install sqlx-cli --no-default-features --features postgres --locked

      - name: Run migrations twice (idempotency test)
        working-directory: backend
        run: |
          echo "First migration run..."
          sqlx migrate run --database-url $DATABASE_URL

          echo "Second migration run (should be no-op)..."
          sqlx migrate run --database-url $DATABASE_URL

          echo "Migrations are idempotent âœ“"
