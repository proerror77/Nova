name: Build & Push to AWS ECR

on:
  push:
    branches: [main, develop, feature/backend-optimization]
    paths:
      - 'backend/**'
      - '.github/workflows/ecr-build-push.yml'
  pull_request:
    branches: [main, develop]
    paths:
      - 'backend/**'

env:
  AWS_REGION: ap-northeast-1
  ECR_REGISTRY: 025434362120.dkr.ecr.ap-northeast-1.amazonaws.com
  REGISTRY_ALIAS: nova

jobs:
  build-and-push:
    name: Build & Push Services
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    strategy:
      matrix:
        service:
          - auth-service
          - user-service
          - content-service
          - feed-service
          - media-service
          - messaging-service
          - search-service
          - streaming-service
      max-parallel: 2

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Debug environment
        run: |
          echo "GitHub Event: ${{ github.event_name }}"
          echo "GitHub Ref: ${{ github.ref }}"
          echo "Service: ${{ matrix.service }}"
          echo "AWS Role ARN: ${{ secrets.AWS_ROLE_ARN }}"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Verify AWS credentials
        run: |
          aws sts get-caller-identity
          echo "AWS credentials configured successfully"

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Extract metadata
        id: meta
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            TAG="pr-${{ github.event.pull_request.number }}"
          else
            TAG="${{ github.ref_name }}"
          fi
          TAG="$TAG-${{ github.sha }}"
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "image=${{ env.ECR_REGISTRY }}/${{ env.REGISTRY_ALIAS }}/${{ matrix.service }}:$TAG" >> $GITHUB_OUTPUT
          echo "image-latest=${{ env.ECR_REGISTRY }}/${{ env.REGISTRY_ALIAS }}/${{ matrix.service }}:latest" >> $GITHUB_OUTPUT

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/${{ matrix.service }}/Dockerfile
          platforms: linux/amd64
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ${{ steps.meta.outputs.image }}
            ${{ github.event_name != 'pull_request' && steps.meta.outputs.image-latest || '' }}
          cache-from: type=registry,ref=${{ env.ECR_REGISTRY }}/${{ env.REGISTRY_ALIAS }}/${{ matrix.service }}:buildcache
          cache-to: type=registry,ref=${{ env.ECR_REGISTRY }}/${{ env.REGISTRY_ALIAS }}/${{ matrix.service }}:buildcache,mode=max
          build-args: |
            SERVICE_NAME=${{ matrix.service }}

      - name: Log build summary
        if: github.event_name != 'pull_request'
        run: |
          echo "Built and pushed: ${{ matrix.service }}"
          echo "Image: ${{ steps.meta.outputs.image }}"

  notify-completion:
    name: Notify Build Completion
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Verify all images in ECR
        run: |
          echo "Verifying all service images in ECR..."
          for service in auth-service user-service content-service feed-service media-service messaging-service search-service streaming-service; do
            IMAGE="${{ env.ECR_REGISTRY }}/${{ env.REGISTRY_ALIAS }}/$service:${{ github.ref_name }}-${{ github.sha }}"
            if aws ecr describe-images --repository-name "${{ env.REGISTRY_ALIAS }}/$service" --region ${{ env.AWS_REGION }} --query "imageDetails[?contains(imageTags, '${{ github.ref_name }}-${{ github.sha }}')]" | grep -q "."; then
              echo "OK: $service image found in ECR"
            else
              echo "WARN: $service image not yet available"
            fi
          done
          echo ""
          echo "All services built successfully!"
          echo "Ready for deployment: ${{ github.ref_name }}-${{ github.sha }}"
