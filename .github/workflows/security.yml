name: Security Scanning

on:
  # 临时禁用 - GitHub Actions 运行器分配失败
  workflow_dispatch:

permissions:
  contents: read
  security-events: write

jobs:
  cargo-audit:
    name: Cargo Audit - Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install cargo-audit
        run: cargo install cargo-audit --locked

      - name: Run cargo audit
        working-directory: backend
        run: cargo audit --deny warnings

  cargo-deny:
    name: Cargo Deny - License and Dependency Policy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install cargo-deny
        run: cargo install cargo-deny --locked

      - name: Create deny.toml if missing
        working-directory: backend
        run: |
          if [ ! -f deny.toml ]; then
            cat > deny.toml << 'EOF'
          # cargo-deny configuration
          # https://embarkstudios.github.io/cargo-deny/

          [advisories]
          vulnerability = "deny"
          unmaintained = "warn"
          yanked = "deny"
          notice = "warn"

          [licenses]
          unlicensed = "deny"
          allow = [
              "MIT",
              "Apache-2.0",
              "BSD-3-Clause",
              "BSD-2-Clause",
              "ISC",
              "Unicode-DFS-2016",
          ]
          deny = [
              "GPL-2.0",
              "GPL-3.0",
              "AGPL-3.0",
          ]
          copyleft = "deny"

          [bans]
          multiple-versions = "warn"
          wildcards = "deny"
          allow-wildcard-paths = false

          [sources]
          unknown-registry = "deny"
          unknown-git = "deny"
          EOF
          fi

      - name: Run cargo deny
        working-directory: backend
        run: cargo deny check

  sast-scan:
    name: SAST - Static Application Security Testing
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Run Semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/rust
            p/secrets
            p/security-audit
          publishToken: ${{ secrets.SEMGREP_APP_TOKEN }}
        continue-on-error: true

  secret-scan:
    name: Secret Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Run TruffleHog
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified
