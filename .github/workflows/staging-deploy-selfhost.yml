name: Stage Backend Code to Staging (Self-Hosted)

on:
  workflow_dispatch:

env:
  AWS_REGION: ap-northeast-1
  REGISTRY: 025434362120.dkr.ecr.ap-northeast-1.amazonaws.com
  REGISTRY_ALIAS: nova
  KUSTOMIZE_PATH: k8s/infrastructure/overlays/staging
  AWS_ROLE_ARN: ${{ secrets.AWS_ROLE_ARN }}

jobs:
  build-and-push:
    name: Build Docker Images
    runs-on: self-hosted
    permissions:
      contents: read
      id-token: write
    outputs:
      has_aws: ${{ steps.detect.outputs.has_aws }}

    strategy:
      matrix:
        service:
          - auth-service
          - user-service
          - content-service
          - feed-service
          - media-service
          - messaging-service
          - search-service
          - streaming-service
      max-parallel: 1
      fail-fast: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check AWS credentials
        run: |
          if [ -z "${{ secrets.AWS_ROLE_ARN }}" ]; then
            echo "⚠️  AWS_ROLE_ARN not configured"
          else
            echo "✅ AWS_ROLE_ARN configured"
          fi

      - id: detect
        name: Detect AWS availability
        run: |
          if [ -n "${{ secrets.AWS_ROLE_ARN }}" ]; then
            echo "has_aws=true" >> "$GITHUB_OUTPUT"
          else
            echo "has_aws=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Configure AWS credentials
        id: aws-creds
        if: ${{ env.AWS_ROLE_ARN != '' }}
        continue-on-error: true
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          audience: sts.amazonaws.com
          role-session-name: gha-staging-${{ github.run_id }}

      - name: Login to ECR
        if: ${{ steps.aws-creds.outcome == 'success' }}
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Compute build context
        id: ctx
        run: |
          svc="${{ matrix.service }}"
          if [ "$svc" = "search-service" ]; then
            echo "CONTEXT=./backend/search-service" >> $GITHUB_ENV
          else
            echo "CONTEXT=./backend" >> $GITHUB_ENV
          fi
          echo "Using context: ${CONTEXT}"

      - name: Build and push ${{ matrix.service }}
        if: ${{ steps.aws-creds.outcome == 'success' }}
        uses: docker/build-push-action@v5
        with:
          context: ${{ env.CONTEXT }}
          file: ./backend/${{ matrix.service }}/Dockerfile
          platforms: linux/amd64
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.REGISTRY_ALIAS }}/${{ matrix.service }}:${{ github.sha }}
            ${{ env.REGISTRY }}/${{ env.REGISTRY_ALIAS }}/${{ matrix.service }}:latest
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.REGISTRY_ALIAS }}/${{ matrix.service }}:buildcache
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.REGISTRY_ALIAS }}/${{ matrix.service }}:buildcache,mode=max

      - name: Local build without push (no AWS credentials)
        if: ${{ steps.aws-creds.outcome != 'success' }}
        uses: docker/build-push-action@v5
        with:
          context: ${{ env.CONTEXT }}
          file: ./backend/${{ matrix.service }}/Dockerfile
          platforms: linux/amd64
          push: false
          tags: ${{ matrix.service }}:local
          cache-from: type=gha
          cache-to: type=gha,mode=max

  update-deployment:
    name: Update Deployment Manifests
    needs: [build-and-push]
    runs-on: self-hosted
    permissions:
      contents: write
    if: ${{ needs.build-and-push.outputs.has_aws == 'true' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Kustomize
        run: |
          curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
          sudo mv kustomize /usr/local/bin/

      - name: Update image tags in kustomization.yaml
        run: |
          cd ${{ env.KUSTOMIZE_PATH }}
          kustomize edit set image \
            nova/auth-service=${{ env.REGISTRY }}/${{ env.REGISTRY_ALIAS }}/auth-service:${{ github.sha }} \
            nova/user-service=${{ env.REGISTRY }}/${{ env.REGISTRY_ALIAS }}/user-service:${{ github.sha }} \
            nova/content-service=${{ env.REGISTRY }}/${{ env.REGISTRY_ALIAS }}/content-service:${{ github.sha }} \
            nova/feed-service=${{ env.REGISTRY }}/${{ env.REGISTRY_ALIAS }}/feed-service:${{ github.sha }} \
            nova/media-service=${{ env.REGISTRY }}/${{ env.REGISTRY_ALIAS }}/media-service:${{ github.sha }} \
            nova/messaging-service=${{ env.REGISTRY }}/${{ env.REGISTRY_ALIAS }}/messaging-service:${{ github.sha }} \
            nova/search-service=${{ env.REGISTRY }}/${{ env.REGISTRY_ALIAS }}/search-service:${{ github.sha }} \
            nova/streaming-service=${{ env.REGISTRY }}/${{ env.REGISTRY_ALIAS }}/streaming-service:${{ github.sha }}

      - name: Verify kustomization changes
        run: |
          cd ${{ env.KUSTOMIZE_PATH }}
          kustomize build . | grep -E "image:|name:" | head -20

      - name: Commit and push changes
        run: |
          git config --local user.email "github-actions@nova.local"
          git config --local user.name "GitHub Actions"
          git add ${{ env.KUSTOMIZE_PATH }}/kustomization.yaml
          if git diff --cached --quiet; then
            echo "No changes"
          else
            git commit -m "chore(staging): update image tags to ${{ github.sha }}"
            git push origin main
          fi

  deploy-to-staging:
    name: Trigger ArgoCD Sync
    needs: [build-and-push]
    runs-on: self-hosted
    if: ${{ needs.build-and-push.outputs.has_aws == 'true' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Verify ArgoCD Application exists
        run: |
          if [ -f "k8s/infrastructure/overlays/staging/kustomization.yaml" ]; then
            echo "✅ Staging kustomization found"
          else
            echo "⚠️  Staging kustomization not found"
          fi

  smoke-test:
    name: Run Staging Smoke Tests
    needs: [build-and-push]
    runs-on: self-hosted
    if: ${{ needs.build-and-push.outputs.has_aws == 'true' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Wait for deployments to stabilize
        run: |
          echo "Waiting 30s"; sleep 30

  skip-deployment-notice:
    name: Skip Notice - AWS Credentials Not Configured
    needs: [build-and-push]
    runs-on: self-hosted
    if: ${{ always() && needs.build-and-push.outputs.has_aws != 'true' }}
    steps:
      - name: Print notice
        run: |
          echo "⚠️  AWS_ROLE_ARN secret not configured; skipping deployment"

  notify-completion:
    name: Notify Staging Deployment
    needs: build-and-push
    runs-on: self-hosted
    if: always()
    steps:
      - name: Summary
        run: |
          echo "Pipeline done. Build result: ${{ needs.build-and-push.result }}"
