# =============================================================================
# GitHub Actions - Streaming Infrastructure CI/CD
# =============================================================================
# Automated testing and validation for the streaming infrastructure
#
# Triggers:
#   - Push to main/develop branches
#   - Pull requests
#   - Manual workflow dispatch
#
# Jobs:
#   1. validate - Validate docker-compose.yml syntax
#   2. test - Run infrastructure tests
#   3. security - Security scanning
#
# =============================================================================

name: Streaming Infrastructure CI

on:
  push:
    branches:
      - main
      - develop
      - 'feature/**'
    paths:
      - 'backend/docker-compose.yml'
      - 'backend/nginx/**'
      - 'backend/init-db/**'
      - 'backend/*.sh'
      - 'backend/Makefile'
      - '.github/workflows/streaming-infrastructure.yml'

  pull_request:
    branches:
      - main
      - develop
    paths:
      - 'backend/docker-compose.yml'
      - 'backend/nginx/**'
      - 'backend/init-db/**'
      - 'backend/*.sh'
      - 'backend/Makefile'

  workflow_dispatch:
    inputs:
      run_full_tests:
        description: 'Run full test suite (including stream tests)'
        required: false
        default: 'false'

env:
  COMPOSE_FILE: backend/docker-compose.yml
  COMPOSE_PROJECT_NAME: ci-streaming

permissions:
  contents: read

jobs:
  # ===========================================================================
  # Job 1: Validate Configuration
  # ===========================================================================
  validate:
    name: Validate Configuration
    concurrency:
      group: streaming-infra-validate-${{ github.ref }}
      cancel-in-progress: true
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate docker-compose.yml
        working-directory: backend
        run: |
          docker compose config --quiet
          echo "✅ Docker Compose configuration is valid"

      - name: Check required files
        run: |
          FILES=(
            "backend/docker-compose.yml"
            "backend/nginx/rtmp.conf"
            "backend/init-db/01-extensions.sql"
            "backend/start-streaming.sh"
            "backend/test-infrastructure.sh"
            "backend/Makefile"
          )

          for FILE in "${FILES[@]}"; do
            if [ ! -f "$FILE" ]; then
              echo "❌ Missing required file: $FILE"
              exit 1
            fi
            echo "✅ Found: $FILE"
          done

      - name: Validate shell scripts
        run: |
          find backend -name "*.sh" -type f -exec bash -n {} \;
          echo "✅ All shell scripts have valid syntax"

      - name: Check Makefile syntax
        working-directory: backend
        run: |
          make --dry-run help > /dev/null
          echo "✅ Makefile syntax is valid"

  # ===========================================================================
  # Job 2: Infrastructure Tests
  # ===========================================================================
  test:
    name: Test Infrastructure
    concurrency:
      group: streaming-infra-test-${{ github.ref }}
      cancel-in-progress: true
    runs-on: ubuntu-latest
    needs: validate
    timeout-minutes: 20

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Create required directories
        working-directory: backend
        run: |
          mkdir -p hls recordings vod_data nginx_logs
          chmod 755 hls recordings vod_data nginx_logs

      - name: Start infrastructure
        working-directory: backend
        run: |
          docker compose up -d
          echo "✅ Services started"

      - name: Wait for services
        working-directory: backend
        run: |
          echo "Waiting for services to be ready..."
          sleep 30

          # Check service status
          docker compose ps

      - name: Run quick tests
        working-directory: backend
        run: |
          chmod +x test-infrastructure.sh
          ./test-infrastructure.sh --quick

      - name: Test PostgreSQL
        working-directory: backend
        run: |
          # Wait for PostgreSQL
          timeout 60 bash -c 'until docker compose exec -T postgres pg_isready -U streaming; do sleep 2; done'

          # Test connection
          docker compose exec -T postgres psql -U streaming -d streaming -c "SELECT 1"

          # Test extensions
          docker compose exec -T postgres psql -U streaming -d streaming -c "\dx"

      - name: Test Redis
        working-directory: backend
        run: |
          docker compose exec -T redis redis-cli ping
          docker compose exec -T redis redis-cli SET test_key test_value
          docker compose exec -T redis redis-cli GET test_key
          docker compose exec -T redis redis-cli DEL test_key

      - name: Test Kafka
        working-directory: backend
        run: |
          # Wait for Kafka
          sleep 30

          # Create test topic
          docker compose exec -T kafka kafka-topics --create \
            --bootstrap-server localhost:9092 \
            --topic ci-test-topic \
            --partitions 1 \
            --replication-factor 1 \
            --if-not-exists

          # List topics
          docker compose exec -T kafka kafka-topics \
            --bootstrap-server localhost:9092 --list

      - name: Test Nginx-RTMP
        run: |
          # Wait for Nginx
          sleep 10

          # Test stats endpoint
          curl -f http://localhost/stat

          # Test RTMP port
          nc -zv localhost 1935

      - name: Run stream test
        if: github.event.inputs.run_full_tests == 'true'
        working-directory: backend
        run: |
          # Install FFmpeg
          sudo apt-get update
          sudo apt-get install -y ffmpeg

          # Run stream test
          ./test-infrastructure.sh --stream

      - name: Check service health
        working-directory: backend
        run: |
          docker compose ps

          # Check if all services are healthy
          UNHEALTHY=$(docker compose ps --format json | jq -r '.[] | select(.Health != "healthy" and .Health != "") | .Service')

          if [ ! -z "$UNHEALTHY" ]; then
            echo "❌ Unhealthy services: $UNHEALTHY"
            exit 1
          fi

          echo "✅ All services are healthy"

      - name: View logs on failure
        if: failure()
        working-directory: backend
        run: |
          echo "=== PostgreSQL Logs ==="
          docker compose logs postgres

          echo "=== Redis Logs ==="
          docker compose logs redis

          echo "=== Kafka Logs ==="
          docker compose logs kafka

          echo "=== Nginx-RTMP Logs ==="
          docker compose logs nginx-rtmp

      - name: Stop infrastructure
        if: always()
        working-directory: backend
        run: |
          docker compose down -v
          echo "✅ Services stopped and volumes removed"

  # ===========================================================================
  # Job 3: Security Scanning
  # ===========================================================================
  security:
    name: Security Scanning
    concurrency:
      group: streaming-infra-sec-${{ github.ref }}
      cancel-in-progress: true
    runs-on: ubuntu-latest
    needs: validate
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'config'
          scan-ref: 'backend/docker-compose.yml'
          format: 'table'
          exit-code: '0'  # Don't fail on vulnerabilities (for now)
          severity: 'CRITICAL,HIGH'

      - name: Scan Docker Compose configuration
        run: |
          # Check for common security issues
          echo "Checking for exposed secrets..."

          if grep -r "password.*=.*[a-zA-Z0-9]" backend/docker-compose.yml; then
            echo "⚠️  Warning: Hardcoded passwords found in docker-compose.yml"
          fi

          echo "✅ Security scan completed"

      - name: Check for default passwords
        run: |
          if grep -i "streaming_dev_password" backend/docker-compose.yml; then
            echo "⚠️  Warning: Default development password found"
            echo "Please change passwords in production!"
          fi

  # ===========================================================================
  # Job 4: Build Summary
  # ===========================================================================
  summary:
    name: Build Summary
    concurrency:
      group: streaming-infra-summary-${{ github.ref }}
      cancel-in-progress: true
    runs-on: ubuntu-latest
    needs: [validate, test, security]
    if: always()

    steps:
      - name: Check build status
        run: |
          echo "## Streaming Infrastructure CI Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Validate | ${{ needs.validate.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Test | ${{ needs.test.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security | ${{ needs.security.result }} |" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.validate.result }}" == "success" ] && \
             [ "${{ needs.test.result }}" == "success" ] && \
             [ "${{ needs.security.result }}" == "success" ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "✅ **All checks passed!**" >> $GITHUB_STEP_SUMMARY
          else
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "❌ **Some checks failed. Please review the logs.**" >> $GITHUB_STEP_SUMMARY
          fi

# =============================================================================
# Environment Variables (Optional)
# =============================================================================
# You can set these in GitHub repository settings → Secrets and variables → Actions
#
# Required secrets:
#   - (none for testing)
#
# Optional secrets for deployment:
#   - DOCKER_USERNAME
#   - DOCKER_PASSWORD
#   - AWS_ACCESS_KEY_ID
#   - AWS_SECRET_ACCESS_KEY
#
# =============================================================================
