name: iOS Tests

on:
  push:
    branches: [ main, develop, 'feature/**' ]
    paths:
      - 'frontend/ios/**'
      - '.github/workflows/ios-tests.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'frontend/ios/**'

env:
  DEVELOPER_DIR: /Applications/Xcode_15.0.app/Contents/Developer
  IOS_SIMULATOR_DEVICE: "iPhone 15"
  IOS_SIMULATOR_OS: "17.0"

jobs:
  unit-tests:
    name: Unit Tests
    runs-on: macos-14
    timeout-minutes: 30

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '15.0'

      - name: Cache Swift Package Manager
        uses: actions/cache@v3
        with:
          path: |
            ~/Library/Caches/org.swift.swiftpm
            .build
          key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}
          restore-keys: |
            ${{ runner.os }}-spm-

      - name: Install dependencies
        working-directory: frontend/ios/NovaApp
        run: |
          # Swift package dependencies are resolved by xcodebuild
          echo "Dependencies will be resolved during build"

      - name: Run Unit Tests
        working-directory: frontend/ios/NovaApp
        run: |
          set -o pipefail
          xcodebuild test \
            -scheme NovaApp \
            -destination "platform=iOS Simulator,name=$IOS_SIMULATOR_DEVICE,OS=$IOS_SIMULATOR_OS" \
            -only-testing:NovaAppTests/Unit \
            -enableCodeCoverage YES \
            -resultBundlePath TestResults/UnitTests.xcresult \
            | xcpretty --color --report html --output TestResults/unit-tests-report.html

      - name: Generate Code Coverage Report
        working-directory: frontend/ios/NovaApp
        run: |
          xcrun xccov view --report --json TestResults/UnitTests.xcresult > TestResults/coverage.json
          xcrun xccov view --report TestResults/UnitTests.xcresult > TestResults/coverage.txt

      - name: Upload Coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./frontend/ios/NovaApp/TestResults/coverage.json
          flags: ios-unit-tests
          name: ios-unit-coverage
          fail_ci_if_error: false

      - name: Check Coverage Threshold
        working-directory: frontend/ios/NovaApp
        run: |
          # Extract coverage percentage
          COVERAGE=$(xcrun xccov view --report TestResults/UnitTests.xcresult | grep "Total coverage" | awk '{print $3}' | sed 's/%//')

          if [ -z "$COVERAGE" ]; then
            echo "❌ Failed to extract coverage percentage"
            exit 1
          fi

          echo "Code coverage: $COVERAGE%"

          # Fail if coverage is below 80% using awk (portable, no bc needed)
          if awk "BEGIN {exit !($COVERAGE < 80)}"; then
            echo "❌ Coverage $COVERAGE% is below threshold of 80%"
            exit 1
          else
            echo "✅ Coverage $COVERAGE% meets threshold"
          fi

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: unit-test-results
          path: frontend/ios/NovaApp/TestResults/
          retention-days: 30

  integration-tests:
    name: Integration Tests
    runs-on: macos-14
    timeout-minutes: 45

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '15.0'

      - name: Cache Swift Package Manager
        uses: actions/cache@v3
        with:
          path: |
            ~/Library/Caches/org.swift.swiftpm
            .build
          key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}
          restore-keys: |
            ${{ runner.os }}-spm-

      - name: Run Integration Tests
        working-directory: frontend/ios/NovaApp
        run: |
          set -o pipefail
          xcodebuild test \
            -scheme NovaApp \
            -destination "platform=iOS Simulator,name=$IOS_SIMULATOR_DEVICE,OS=$IOS_SIMULATOR_OS" \
            -only-testing:NovaAppTests/Integration \
            -resultBundlePath TestResults/IntegrationTests.xcresult \
            | xcpretty --color --report html --output TestResults/integration-tests-report.html

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: integration-test-results
          path: frontend/ios/NovaApp/TestResults/
          retention-days: 30

  ui-tests:
    name: UI Tests
    runs-on: macos-14
    timeout-minutes: 60
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '15.0'

      - name: Boot Simulator
        run: |
          echo "Booting simulator: $IOS_SIMULATOR_DEVICE"
          if ! xcrun simctl boot "$IOS_SIMULATOR_DEVICE" 2>&1 | tee simulator.log; then
            echo "❌ Failed to boot simulator"
            xcrun simctl list devices
            exit 1
          fi

          if ! xcrun simctl list devices | grep -q "$IOS_SIMULATOR_DEVICE"; then
            echo "❌ Simulator not found after boot"
            xcrun simctl list devices
            exit 1
          fi
          echo "✅ Simulator booted successfully"

      - name: Run UI Tests
        working-directory: frontend/ios/NovaApp
        run: |
          set -o pipefail
          xcodebuild test \
            -scheme NovaApp \
            -destination "platform=iOS Simulator,name=$IOS_SIMULATOR_DEVICE,OS=$IOS_SIMULATOR_OS" \
            -only-testing:NovaAppUITests \
            -resultBundlePath TestResults/UITests.xcresult \
            | xcpretty --color --report html --output TestResults/ui-tests-report.html

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: ui-test-results
          path: frontend/ios/NovaApp/TestResults/
          retention-days: 30

      - name: Upload Screenshots
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: ui-test-screenshots
          path: |
            ~/Library/Developer/Xcode/DerivedData/*/Logs/Test/Attachments/
          retention-days: 7

  build-validation:
    name: Build Validation
    runs-on: macos-14
    timeout-minutes: 20

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '15.0'

      - name: Build for Testing
        working-directory: frontend/ios/NovaApp
        run: |
          set -o pipefail
          xcodebuild build-for-testing \
            -scheme NovaApp \
            -destination "platform=iOS Simulator,name=$IOS_SIMULATOR_DEVICE,OS=$IOS_SIMULATOR_OS" \
            -enableCodeCoverage YES \
            | xcpretty --color

      - name: Check for Build Warnings
        working-directory: frontend/ios/NovaApp
        run: |
          xcodebuild clean build \
            -scheme NovaApp \
            -destination "platform=iOS Simulator,name=$IOS_SIMULATOR_DEVICE,OS=$IOS_SIMULATOR_OS" \
            -quiet \
            2>&1 | tee build.log

          # Count warnings - use grep with proper error handling
          WARNING_COUNT=$(grep -c "warning:" build.log 2>/dev/null || echo "0")
          echo "Build warnings: $WARNING_COUNT"

          # Fail if warnings exceed threshold
          THRESHOLD=5
          if [ "$WARNING_COUNT" -gt "$THRESHOLD" ]; then
            echo "❌ Too many warnings ($WARNING_COUNT > $THRESHOLD)"
            grep "warning:" build.log | head -10
            exit 1
          else
            echo "✅ Warning count ($WARNING_COUNT) within threshold"
          fi

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    if: always()

    steps:
      - name: Download Unit Test Results
        uses: actions/download-artifact@v3
        with:
          name: unit-test-results
          path: unit-results

      - name: Download Integration Test Results
        uses: actions/download-artifact@v3
        with:
          name: integration-test-results
          path: integration-results

      - name: Generate Summary
        run: |
          echo "## iOS Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ -f "unit-results/coverage.txt" ]; then
            echo "### Code Coverage" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            cat unit-results/coverage.txt >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Test Status" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Unit Tests: ${{ needs.unit-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Integration Tests: ${{ needs.integration-tests.result }}" >> $GITHUB_STEP_SUMMARY

  performance-tests:
    name: Performance Tests
    runs-on: macos-14
    timeout-minutes: 30
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '15.0'

      - name: Run Performance Tests
        working-directory: frontend/ios/NovaApp
        run: |
          set -o pipefail
          xcodebuild test \
            -scheme NovaApp \
            -destination "platform=iOS Simulator,name=$IOS_SIMULATOR_DEVICE,OS=$IOS_SIMULATOR_OS" \
            -only-testing:NovaAppTests/Performance \
            -resultBundlePath TestResults/PerformanceTests.xcresult \
            | xcpretty --color

      - name: Analyze Performance Results
        working-directory: frontend/ios/NovaApp
        run: |
          # Extract performance metrics
          xcrun xcresulttool get --format json \
            --path TestResults/PerformanceTests.xcresult > performance.json

          # TODO: Parse and analyze performance metrics
          echo "Performance results saved to performance.json"

      - name: Upload Performance Results
        uses: actions/upload-artifact@v3
        with:
          name: performance-results
          path: frontend/ios/NovaApp/TestResults/
          retention-days: 90
