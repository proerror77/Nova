worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
    use epoll;
}

rtmp {
    server {
        listen 1935;
        chunk_size 4096;
        max_connections 1000;

        application live {
            live on;
            record all;
            record_path /tmp/recordings;
            record_unique on;

            # HLS configuration
            hls on;
            hls_path /tmp/hls;
            hls_fragment 3s;
            hls_playlist_length 60s;
            hls_fragment_slicing aligned;

            # Adaptive bitrate streaming
            exec_pull /opt/nginx-rtmp/generate_dash.sh $name;

            # Logging
            access_log /var/log/nginx/rtmp_access.log;
        }

        # DASH streaming
        application dash {
            live on;
            dash on;
            dash_path /tmp/dash;
            dash_fragment 3s;
            dash_playlist_length 60s;
        }

        # VOD (Video on Demand)
        application vod {
            play /tmp/vod;
        }
    }
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;

    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    server_tokens off;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types text/plain text/css text/xml text/javascript
               application/json application/javascript application/xml+rss
               application/rss+xml font/truetype font/opentype
               application/vnd.ms-fontobject image/svg+xml;

    # HLS upstream
    upstream backend {
        least_conn;
        server user-service:8080 weight=10 max_fails=3 fail_timeout=30s;
    }

    server {
        listen 80;
        server_name _;

        # HLS streaming endpoint
        location /hls/ {
            types {
                application/vnd.apple.mpegurl m3u8;
                video/mp2t ts;
            }

            alias /tmp/hls/;
            expires -1;
            add_header Cache-Control "no-cache, no-store, must-revalidate, proxy-revalidate, max-age=0";
            add_header Pragma "no-cache";
            add_header Expires "0";

            # CORS headers
            add_header Access-Control-Allow-Origin "*";
            add_header Access-Control-Allow-Methods "GET, OPTIONS";
            add_header Access-Control-Allow-Headers "Content-Type";

            if ($request_method = OPTIONS) {
                return 200;
            }
        }

        # DASH streaming endpoint
        location /dash/ {
            types {
                application/dash+xml mpd;
                video/mp4 mp4;
            }

            alias /tmp/dash/;
            expires -1;
            add_header Cache-Control "no-cache, no-store, must-revalidate, proxy-revalidate, max-age=0";
            add_header Access-Control-Allow-Origin "*";
            add_header Access-Control-Allow-Methods "GET, OPTIONS";

            if ($request_method = OPTIONS) {
                return 200;
            }
        }

        # RTMP stats endpoint
        location /stat {
            rtmp_stat all;
            rtmp_stat_stylesheet /stat.xsl;
        }

        location /stat.xsl {
            alias /opt/nginx-rtmp/stat.xsl;
        }

        # Control endpoint for RTMP
        location /control {
            rtmp_control all;
        }

        # Proxy to backend for API
        location /api/ {
            proxy_pass http://backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
        }

        # Health check endpoint
        location /health {
            access_log off;
            return 200 "healthy";
            add_header Content-Type text/plain;
        }

        # Default location
        location / {
            root /usr/share/nginx/html;
            try_files $uri $uri/ =404;
        }

        # Error pages
        error_page 404 /404.html;
        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
            root /usr/share/nginx/html;
        }
    }
}
