version: '3.8'

# Nova 开发环境 Docker Compose 配置
# 用于本地开发和测试所有微服务

services:
  # PostgreSQL 数据库
  postgres:
    image: postgres:15-alpine
    container_name: nova-postgres
    environment:
      POSTGRES_USER: nova
      POSTGRES_PASSWORD: nova_password
      POSTGRES_INITDB_ARGS: "-c shared_preload_libraries=pg_stat_statements"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/migrations:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U nova"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - nova

  # Redis 缓存
  redis:
    image: redis:7-alpine
    container_name: nova-redis
    command: redis-server --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - nova

  # MinIO S3 兼容存储
  minio:
    image: minio/minio:latest
    container_name: nova-minio
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - nova

  # Kafka 消息队列
  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: nova-kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    ports:
      - "9092:9092"
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions.sh", "--bootstrap-server", "localhost:9092"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - nova

  # Zookeeper（Kafka 依赖）
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: nova-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    ports:
      - "2181:2181"
    healthcheck:
      test: ["CMD", "echo", "ruok", "|", "nc", "localhost", "2181"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - nova

  # ClickHouse 分析数据库
  clickhouse:
    image: clickhouse/clickhouse-server:latest
    container_name: nova-clickhouse
    environment:
      CLICKHOUSE_DB: nova
      CLICKHOUSE_USER: nova
      CLICKHOUSE_PASSWORD: nova_password
    ports:
      - "8123:8123"
      - "9000:9000"
    volumes:
      - clickhouse_data:/var/lib/clickhouse
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8123/ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - nova

  # Jaeger 分布式追踪
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: nova-jaeger
    ports:
      - "6831:6831/udp"
      - "16686:16686"
    environment:
      COLLECTOR_ZIPKIN_HOST_PORT: ":9411"
    networks:
      - nova

  # Prometheus 指标收集
  prometheus:
    image: prom/prometheus:latest
    container_name: nova-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./backend/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    networks:
      - nova

  # Grafana 指标可视化
  grafana:
    image: grafana/grafana:latest
    container_name: nova-grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_SECURITY_ADMIN_USER: admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./backend/monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    depends_on:
      - prometheus
    networks:
      - nova

  # Nginx API Gateway
  nginx:
    image: nginx:alpine
    container_name: nova-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./backend/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./backend/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./backend/certs:/etc/nginx/certs:ro
    depends_on:
      - content-service
      - media-service
    networks:
      - nova

# 网络
networks:
  nova:
    driver: bridge

# 卷
volumes:
  postgres_data:
  redis_data:
  minio_data:
  clickhouse_data:
  prometheus_data:
  grafana_data:

# 环境文件参考
# 创建 .env.dev 文件：
# DATABASE_URL=postgres://nova:nova_password@postgres:5432/nova_content
# REDIS_URL=redis://redis:6379
# KAFKA_BROKERS=kafka:9092
# S3_BUCKET=nova-uploads
# AWS_REGION=us-east-1
# AWS_ACCESS_KEY_ID=minioadmin
# AWS_SECRET_ACCESS_KEY=minioadmin
# S3_ENDPOINT=http://minio:9000

# 启动命令：
# docker-compose -f docker-compose.dev.yml up -d

# 初始化 MinIO bucket：
# docker exec nova-minio mc alias set minio http://localhost:9000 minioadmin minioadmin
# docker exec nova-minio mc mb minio/nova-uploads

# 查看日志：
# docker-compose -f docker-compose.dev.yml logs -f [service-name]

# 停止所有服务：
# docker-compose -f docker-compose.dev.yml down

# 清理所有数据：
# docker-compose -f docker-compose.dev.yml down -v
