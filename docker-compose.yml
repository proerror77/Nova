services:
  # ============================================
  # PostgreSQL Database
  # ============================================
  postgres:
    image: debezium/postgres:15-alpine
    container_name: nova-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-nova_auth}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    ports:
      - "${POSTGRES_PORT:-55432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/migrations:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - nova-network

  # ============================================
  # Redis Cache
  # ============================================
  redis:
    image: redis:7-alpine
    container_name: nova-redis
    restart: unless-stopped
    command: >
      redis-server
      --appendonly yes
      --requirepass ${REDIS_PASSWORD:-redis123}
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - nova-network

  # ============================================
  # Zookeeper (for Kafka)
  # ============================================
  zookeeper:
    image: confluentinc/cp-zookeeper:7.6.1
    container_name: nova-zookeeper
    restart: unless-stopped
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
    networks:
      - nova-network

  # ============================================
  # Kafka Broker
  # ============================================
  kafka:
    image: confluentinc/cp-kafka:7.6.1
    container_name: nova-kafka
    restart: unless-stopped
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:29092
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    ports:
      - "29092:29092"
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - nova-network

  # ============================================
  # Kafka Connect / Debezium
  # ============================================
  debezium:
    image: debezium/connect:2.5
    container_name: nova-debezium
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_started
    environment:
      BOOTSTRAP_SERVERS: kafka:9092
      GROUP_ID: 1
      CONFIG_STORAGE_TOPIC: debezium_config
      OFFSET_STORAGE_TOPIC: debezium_offsets
      STATUS_STORAGE_TOPIC: debezium_status
      KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      KEY_CONVERTER_SCHEMAS_ENABLE: "false"
      VALUE_CONVERTER_SCHEMAS_ENABLE: "false"
      ENABLE_DEBEZIUM_SCRIPTING: "true"
    ports:
      - "8083:8083"
    networks:
      - nova-network

  # ============================================
  # Kafka UI (observability)
  # ============================================
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: nova-kafka-ui
    restart: unless-stopped
    depends_on:
      kafka:
        condition: service_started
    environment:
      KAFKA_CLUSTERS_0_NAME: nova-cluster
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
      KAFKA_CLUSTERS_0_KAFKACONNECT_0_NAME: debezium
      KAFKA_CLUSTERS_0_KAFKACONNECT_0_ADDRESS: http://debezium:8083
    networks:
      - nova-network

  # ============================================
  # ClickHouse (OLAP)
  # ============================================
  clickhouse:
    image: clickhouse/clickhouse-server:23.8
    container_name: nova-clickhouse
    restart: unless-stopped
    environment:
      CLICKHOUSE_DB: nova_feed
      CLICKHOUSE_USER: default
      CLICKHOUSE_PASSWORD: clickhouse
      CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT: 1
    ports:
      - "8123:8123"   # HTTP
      - "9000:9000"   # Native TCP
    volumes:
      - clickhouse_data:/var/lib/clickhouse
      - clickhouse_logs:/var/log/clickhouse-server
      - ./backend/clickhouse/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test:
        [
          "CMD",
          "bash",
          "-c",
          "clickhouse-client --user=default --password=clickhouse --query='SELECT 1'"
        ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - nova-network

  # ============================================
  # Neo4j (Graph DB)
  # ============================================
  neo4j:
    image: neo4j:5.23
    container_name: nova-neo4j
    restart: unless-stopped
    environment:
      - NEO4J_AUTH=${NEO4J_USER:-neo4j}/${NEO4J_PASSWORD:-neo4j}
      - NEO4J_server_memory_pagecache_size=256M
      - NEO4J_server_memory_heap_max__size=512M
    ports:
      - "7474:7474"   # HTTP
      - "7687:7687"   # Bolt
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
    healthcheck:
      test: ["CMD", "bash", "-lc", "cypher-shell -u ${NEO4J_USER:-neo4j} -p ${NEO4J_PASSWORD:-neo4j} 'RETURN 1' || exit 1"]
      interval: 15s
      timeout: 10s
      retries: 10
    networks:
      - nova-network

  # ============================================
  # User Service (Rust Actix-web)
  # ============================================
  user-service:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: runtime
    container_name: nova-user-service
    restart: unless-stopped
    environment:
      # Application
      APP_ENV: development
      APP_HOST: 0.0.0.0
      APP_PORT: 8080
      RUST_LOG: debug
      # Dev auto-verify newly registered emails (skip email link flow)
      DEV_AUTO_VERIFY_EMAIL: "true"

      # Database
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/${POSTGRES_DB:-nova_auth}
      DATABASE_MAX_CONNECTIONS: 20

      # Redis
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis123}@redis:6379/0
      REDIS_POOL_SIZE: 10

      # Kafka / Debezium
      KAFKA_BROKERS: kafka:9092
      DEBEZIUM_CONNECT_URL: http://debezium:8083

      # ClickHouse
      CLICKHOUSE_URL: http://clickhouse:8123
      CLICKHOUSE_DB: nova_feed
      CLICKHOUSE_USER: default
      CLICKHOUSE_PASSWORD: clickhouse
      # Neo4j
      NEO4J_ENABLED: "true"
      NEO4J_URI: bolt://neo4j:7687
      NEO4J_USER: ${NEO4J_USER:-neo4j}
      NEO4J_PASSWORD: ${NEO4J_PASSWORD:-neo4j}
      # Milvus (Vector DB)
      MILVUS_ENABLED: "true"
      MILVUS_URL: http://milvus:9091
      MILVUS_COLLECTION: video_embeddings

      # Recommendation V2 (optional; safe to leave false)
      RECOMMENDATION_V2_INIT: "false"
      RECOMMENDATION_V2_ENABLED: "false"

      # JWT
      JWT_SECRET: ${JWT_SECRET:-dev_secret_change_in_production_32chars}
      JWT_ACCESS_TOKEN_TTL: 900
      JWT_REFRESH_TOKEN_TTL: 604800

      # JWT PEMs (raw PEM for dev)
      JWT_PRIVATE_KEY_PEM: |
        -----BEGIN PRIVATE KEY-----
        MIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQCvWDmMAahIQk3u
        pSng6CgG18O11nBj7XnWM+Pe+7xDuyR0HtVfuBMm/YJCSti2CCYP51SXrCzYDmKx
        eauvnYNUpXTtqzZLu9eTPA/sy+7BZ2k0tkggHQZcPUhpzLC7ZeXFcGjgiDbirEMh
        9KWRbtu/SEz3Jf42dbcxxetwBjGUix2ILP2AMqixVR1CmX+Lztjzdy6mCDbd+qdc
        ZshvxMiPaadP8Yv5w2JnIP6c91ntZNEREVmstWgELQV2gjCwN05LCa43k2MgNM5L
        srStZS2MJMiAwmtkSAhBSjaQPt3kplunQ7r4LoFylMy3n1qgYFz0Af2H5o7DA4VB
        21+Uxz/5AgMBAAECggEAAi9qii7kGsBuybRXvQSPqSQrvXqmbGxjehKr+pWvDzYI
        GoVe2eJIpNIAe1SE9mHMHaMfqAM+jNPDEZynUdk374hfWG3rj46P/XcAaM5S06i3
        BC/oXrQV5fTij+T75935etgvimrQKkuEy6nJnXIg/XWIdgUMcb/OUGm7ySnemNAM
        sOJz9Y1YjP2ypL8QW27VK0HTDLxDf4AAUcKniJ2QJg6SaSO8mjajhJU44DBwmgsQ
        4UK6jN/HJdOZPw+JRESoTYOtWdZuh9HKDuFg7PsvhURrgHPN06OoOv7anhb200Uy
        Mc2yikpLSD4E/6SSTo37pEw6z8mYLBq3AZFnwvneLQKBgQD0K1bfzSDZ4BkUUe+V
        IeBi7l668ZdCKEJJ+50n9T13CqeigHkUYijvvX/BdQrGRWGDzrLsCpZoEf/Jiw2j
        A7zlHAoMpCPT/r8hcXdMAcglqTeCvVlzDWD9Tb7Ep0WU3GFHf61FW0n5rRUAvKah
        ektuaEwlq2NQgZTzzijB5hHwZQKBgQC31zBHOnUOkxiTBtpPL1ZpdEodLWh/ju65
        clkq2uFZUSDYAD4DerEFcEYes7JXy4kV1c6ep2zNw2W1U6m8M8AM0opyolBVxXGj
        jYnAKdC/VycEc59rs8NuGz8WZ2uPU1TXCNOM47QA00Y0nhgBHxhlfFBVYz3oY8nm
        ijbwn7N2BQKBgFF5FKfg3pFUwYmSPYtZnnHkcB+Y9YvRuyzMlIf8wOGz4HPMwpoW
        lupIJRT8ZPf7tqowkmtIrR9UwjESAR7f5Gvei0vkiT/3xPb30YK/JXXLnQY3AF3v
        nOlow7sCxakCUEN3Su3VpD13j4aLbF59XCYfDymSorT+SCGCLP9mMZ4xAoGBAJd/
        Trqz8rjzASJQWGE+2lAG0/idbesIZ7QNBmwpeeE32QAHmxMU7YJU1oQAg6yT/0Eu
        M5pM0H30UwGNk2eToeUvL4ZuOhOkpRQp1GW2T98OPAoQGkUQG7HF5ERbL6kp+9VE
        4cjN8I1pjgZYbeGmtV0Uh8MGCINUkJJaPhInGSXdAoGBAJAdh1Hd1RSLsGffY9y0
        sJmx8DPFffQGrT1sLn1PuvfAd5W5/A3GaI38Z1KkQ1LgQe/9rE073i26lUVckOnR
        1E+WImeCHl0v3RueN7ula9W3zb6mwGjs8NQjM4mzhCjQ+9OkpOr57QAATALAeRT+
        jTYkKI1ACaZWh2dpvcW1fzB2
        -----END PRIVATE KEY-----
      JWT_PUBLIC_KEY_PEM: |
        -----BEGIN PUBLIC KEY-----
        MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAr1g5jAGoSEJN7qUp4Ogo
        BtfDtdZwY+151jPj3vu8Q7skdB7VX7gTJv2CQkrYtggmD+dUl6ws2A5isXmrr52D
        VKV07as2S7vXkzwP7MvuwWdpNLZIIB0GXD1Iacywu2XlxXBo4Ig24qxDIfSlkW7b
        v0hM9yX+NnW3McXrcAYxlIsdiCz9gDKosVUdQpl/i87Y83cupgg23fqnXGbIb8TI
        j2mnT/GL+cNiZyD+nPdZ7WTRERFZrLVoBC0FdoIwsDdOSwmuN5NjIDTOS7K0rWUt
        jCTIgMJrZEgIQUo2kD7d5KZbp0O6+C6BcpTMt59aoGBc9AH9h+aOwwOFQdtflMc/
        +QIDAQAB
        -----END PUBLIC KEY-----

      # Feature flags (top)
      RUN_MIGRATIONS: ${RUN_MIGRATIONS:-true}
      ENABLE_CDC: ${ENABLE_CDC:-false}

      # Messaging service URL (for cross-service communication)
      MESSAGING_SERVICE_URL: http://messaging-service:3000

      # Notifications (stubbed for local dev)
      FCM_PROJECT_ID: ${FCM_PROJECT_ID:-nova-dev}
      FCM_SERVICE_ACCOUNT_JSON_BASE64: ${FCM_SERVICE_ACCOUNT_JSON_BASE64:-eyJwcm9qZWN0X2lkIjogIm5vdmEtZGV2IiwgInByaXZhdGVfa2V5X2lkIjogImRldi1rZXktaWQiLCAicHJpdmF0ZV9rZXkiOiAiLS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tXG5NSUlFdmdJQkFEQU5CZ2txaGtpRzl3MEJBUUVGQUFTQ0JLZ3dnZ1NrQWdFQUFvSUJBUUN2V0RtTUFhaElRazN1XG5wU25nNkNnRzE4TzExbkJqN1huV00rUGUrN3hEdXlSMEh0VmZ1Qk1tL1lKQ1N0aTJDQ1lQNTFTWHJDellEbUt4XG5lYXV2bllOVXBYVHRxelpMdTllVFBBL3N5KzdCWjJrMHRrZ2dIUVpjUFVocHpMQzdaZVhGY0dqZ2lEYmlyRU1oXG45S1dSYnR1L1NFejNKZjQyZGJjeHhldHdCakdVaXgySUxQMkFNcWl4VlIxQ21YK0x6dGp6ZHk2bUNEYmQrcWRjXG5ac2h2eE1pUGFhZFA4WXY1dzJKbklQNmM5MW50Wk5FUkVWbXN0V2dFTFFWMmdqQ3dOMDVMQ2E0M2syTWdOTTVMXG5zclN0WlMyTUpNaUF3bXRrU0FoQlNqYVFQdDNrcGx1blE3cjRMb0Z5bE15M24xcWdZRnowQWYySDVvN0RBNFZCXG4yMStVeHovNUFnTUJBQUVDZ2dFQUFpOXFpaTdrR3NCdXliUlh2UVNQcVNRcnZYcW1iR3hqZWhLcitwV3ZEellJXG5Hb1ZlMmVKSXBOSUFlMVNFOW1ITUhhTWZxQU0rak5QREVaeW5VZGszNzRoZldHM3JqNDZQL1hjQWFNNVMwNmkzXG5CQy9vWHJRVjVmVGlqK1Q3NTkzNWV0Z3ZpbXJRS2t1RXk2bkpuWElnL1hXSWRnVU1jYi9PVUdtN3lTbmVtTkFNXG5zT0p6OVkxWWpQMnlwTDhRVzI3VkswSFRETHhEZjRBQVVjS25pSjJRSmc2U2FTTzhtamFqaEpVNDREQndtZ3NRXG40VUs2ak4vSEpkT1pQdytKUkVTb1RZT3RXZFp1aDlIS0R1Rmc3UHN2aFVScmdIUE4wNk9vT3Y3YW5oYjIwMFV5XG5NYzJ5aWtwTFNENEUvNlNTVG8zN3BFdzZ6OG1ZTEJxM0FaRm53dm5lTFFLQmdRRDBLMWJmelNEWjRCa1VVZStWXG5JZUJpN2w2NjhaZENLRUpKKzUwbjlUMTNDcWVpZ0hrVVljanZ2WC9CZFFyR1JXR0R6ckxzQ3Bab0VmL0ppdzJqXG5BN3psSEFvTXBDUFQvcjhoY1hkTUFjZ2xxVGVDdlZsekRXRDlUYjdFcDBXVTNHRkhmNjFGVzBuNXJSVUF2S2FoXG5la3R1YUV3bHEyTlFnWlR6emlqQjVoSHdaUUtCZ1FDMzF6QkhPblVPa3hpVEJ0cFBMMVpwZEVvZExXaC9qdTY1XG5jbGtxMnVGWlVTRFlBRDREZXJFRmNFWWVzN0pYeTRrVjFjNmVwMnpOdzJXMVU2bThNOEFNMG9weW9sQlZ4WEdqXG5qWW5BS2RDL1Z5Y0VjNTlyczhOdUd6OFdaMnVQVTFUWENOT000N1FBMDBZMG5oZ0JIeGhsZkZCVll6M29ZOG5tXG5pamJ3bjdOMkJRS0JnRkY1RktmZzNwRlV3WW1TUFl0Wm5uSGtjQitZOVl2UnV5ek1sSWY4d09HejRIUE13cG9XXG5sdXBJSlJUOFpQZjd0cW93a210SXJSOVV3akVTQVI3ZjVHdmVpMHZraVQvM3hQYjMwWUsvSlhYTG5RWTNBRjN2XG5uT2xvdzdzQ3hha0NVRU4zU3UzVnBEMTNqNGFMYkY1OVhDWWZEeW1Tb3JUK1NDR0NMUDltTVo0eEFvR0JBSmQvXG5UcnF6OHJqekFTSlFXR0UrMmxBRzAvaWRiZXNJWjdRTkJtd3BlZUUzMlFBSG14TVU3WUpVMW9RQWc2eVQvMEV1XG5NNXBNMEgzMFV3R05rMmVUb2VVdkw0WnVPaE9rcFJRcDFHVzJUOThPUEFvUUdrVVFHN0hGNUVSYkw2a3ArOVZFXG40Y2pOOEkxcGpnWlliZUdtdFYwVWg4TUdDSU5Va0pKYVBoSW5HU1hkQW9HQkFKQWRoMUhkMVJTTHNHZmZZOXkwXG5zSm14OERQRmZmUUdyVDFzTG4xUHV2ZkFkNVc1L0EzR2FJMzhaMUtrUTFMZ1FlLzlyRTA3M2kyNmxVVmNrT25SXG4xRStXSW1lQ0hsMHYzUnVlTjd1bGE5VzN6YjZtd0dqczhOUWpNNG16aENqUSs5T2twT3I1N1FBQVRBTEFlUlQrXG5qVFlrS0kxQUNhWldoMmRwdmNXMWZ6QjJcbi0tLS0tRU5EIFBSSVZBVEUgS0VZLS0tLS1cbi}

      # APNs stubs
      APNS_CERTIFICATE_PATH: ${APNS_CERTIFICATE_PATH:-/app/certs/apns_cert.p8}
      APNS_KEY_PATH: ${APNS_KEY_PATH:-/app/certs/apns_key.p8}
      APNS_TEAM_ID: ${APNS_TEAM_ID:-DEVTEAMID}
      APNS_KEY_ID: ${APNS_KEY_ID:-DEVKEYID}
      APNS_BUNDLE_ID: ${APNS_BUNDLE_ID:-com.example.nova}
      APNS_IS_PRODUCTION: ${APNS_IS_PRODUCTION:-false}

      # Local stubs and feature flags
      S3_DISABLE: "true"
      # S3 dummy values for dev
      S3_BUCKET_NAME: ${S3_BUCKET_NAME:-dev-bucket}
      S3_REGION: ${S3_REGION:-us-east-1}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID:-dev}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY:-dev}
      CLOUDFRONT_URL: ${CLOUDFRONT_URL:-http://localhost:8080}
      # Feature flags (bottom overrides removed to avoid duplicates)

      # Email (mock for development)
      SMTP_HOST: ${SMTP_HOST:-mailhog}
      SMTP_PORT: ${SMTP_PORT:-1025}
      SMTP_USERNAME: ${SMTP_USERNAME:-}
      SMTP_PASSWORD: ${SMTP_PASSWORD:-}
      SMTP_FROM: ${SMTP_FROM:-noreply@nova.dev}

      # Rate limiting
      RATE_LIMIT_MAX_REQUESTS: 100
      RATE_LIMIT_WINDOW_SECS: 60
    ports:
      - "${USER_SERVICE_PORT:-8080}:8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_started
      clickhouse:
        condition: service_healthy
      neo4j:
        condition: service_started
    networks:
      - nova-network
    healthcheck:
      test: ["CMD-SHELL", "/bin/bash -lc 'exec 3<>/dev/tcp/127.0.0.1/8080 && echo -e \"GET /api/v1/health HTTP/1.0\\r\\n\\r\\n\" >&3 && head -n 1 <&3 | grep 200'" ]
      interval: 30s
      timeout: 5s
      retries: 3

  # ============================================
  # Messaging Service (WS Gateway for DMs)
  # ============================================
  messaging-service:
    build:
      context: ./backend
      dockerfile: Dockerfile.messaging
    container_name: nova-messaging-service
    restart: unless-stopped
    environment:
      # Application
      APP_ENV: development
      PORT: 3000
      RUST_LOG: messaging_service=debug,axum=debug,tower_http=debug

      # Database (shared with user-service)
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/${POSTGRES_DB:-nova_auth}

      # Redis (shared pubsub channel)
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis123}@redis:6379/0

      # Kafka
      KAFKA_BROKERS: kafka:9092

      # Dev: allow WS without membership check to simplify local testing
      WS_DEV_ALLOW_ALL: "true"

      # JWT verification (use same public key as user-service for RS256 verification)
      JWT_PUBLIC_KEY_PEM: |
        -----BEGIN PUBLIC KEY-----
        MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAr1g5jAGoSEJN7qUp4Ogo
        BtfDtdZwY+151jPj3vu8Q7skdB7VX7gTJv2CQkrYtggmD+dUl6ws2A5isXmrr52D
        VKV07as2S7vXkzwP7MvuwWdpNLZIIB0GXD1Iacywu2XlxXBo4Ig24qxDIfSlkW7b
        v0hM9yX+NnW3McXrcAYxlIsdiCz9gDKosVUdQpl/i87Y83cupgg23fqnXGbIb8TI
        j2mnT/GL+cNiZyD+nPdZ7WTRERFZrLVoBC0FdoIwsDdOSwmuN5NjIDTOS7K0rWUt
        jCTIgMJrZEgIQUo2kD7d5KZbp0O6+C6BcpTMt59aoGBc9AH9h+aOwwOFQdtflMc/
        +QIDAQAB
        -----END PUBLIC KEY-----

      # 32-byte key (base64) for server-side encryption used by messaging-service endpoints
      # Random dev key; replace in production
      SECRETBOX_KEY_B64: dGVzdGluZy10ZXN0aW5nLXRlc3RpbmctdGVzdGluZy10ZXN0aW5nMDA=
    ports:
      - "8085:3000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_started
    networks:
      - nova-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/health || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s

  # ============================================
  # Streaming Services
  # ============================================
  streaming-ingest:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: runtime
    container_name: nova-streaming-ingest
    restart: unless-stopped
    environment:
      RUST_LOG: info
      APP_ENV: development
      RTMP_BIND_ADDR: "0.0.0.0:1935"
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/${POSTGRES_DB:-nova_auth}
      KAFKA_BROKERS: kafka:9092
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis123}@redis:6379/0
    ports:
      - "1935:1935"  # RTMP
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_started
      redis:
        condition: service_healthy
    networks:
      - nova-network

  streaming-transcode:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: runtime
    container_name: nova-streaming-transcode
    restart: unless-stopped
    environment:
      RUST_LOG: info
      APP_ENV: development
      KAFKA_BROKERS: kafka:9092
      KAFKA_CONSUMER_TOPIC: stream-frames
      SEGMENT_OUTPUT_DIR: /var/segments
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis123}@redis:6379/1
      MOCK_FFMPEG: "true"
    depends_on:
      kafka:
        condition: service_started
      redis:
        condition: service_healthy
    volumes:
      - streaming_segments:/var/segments
    networks:
      - nova-network

  streaming-delivery:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: runtime
    container_name: nova-streaming-delivery
    restart: unless-stopped
    environment:
      RUST_LOG: info
      APP_ENV: development
      APP_HOST: 0.0.0.0
      APP_PORT: 8080
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis123}@redis:6379/2
    ports:
      - "8082:8080"  # HLS/DASH delivery
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - nova-network

  streaming-api:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: runtime
    container_name: nova-streaming-api
    restart: unless-stopped
    environment:
      RUST_LOG: info
      APP_ENV: development
      APP_HOST: 0.0.0.0
      APP_PORT: 8081
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/${POSTGRES_DB:-nova_auth}
      KAFKA_BROKERS: kafka:9092
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis123}@redis:6379/3
    ports:
      - "8081:8081"  # Management API
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_started
      redis:
        condition: service_healthy
    networks:
      - nova-network

  # ============================================
  # Milvus (Vector DB) - Standalone
  # ============================================
  milvus:
    image: milvusdb/milvus:v2.4.3
    container_name: nova-milvus
    restart: unless-stopped
    entrypoint: ["/tini", "--"]
    command: ["milvus", "run", "standalone"]
    ports:
      - "19530:19530"   # gRPC
      - "9091:9091"     # HTTP
    environment:
      ETCD_USE_EMBED: "true"
      MINIO_USE_EMBED: "true"
      LOG_LEVEL: info
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9091/api/v1/health"]
      interval: 10s
      timeout: 5s
      retries: 10
    networks:
      - nova-network

  # ============================================
  # Search Service (Axum)
  # ============================================
  search-service:
    build:
      context: ./backend/search-service
    container_name: nova-search-service
    restart: unless-stopped
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/${POSTGRES_DB:-nova_auth}
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis123}@redis:6379/0
      PORT: 8086
      RUST_LOG: search_service=debug,tower_http=debug
    ports:
      - "8086:8086"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - nova-network

  # ============================================
  # MailHog (Email testing - development only)
  # ============================================
  mailhog:
    image: mailhog/mailhog:latest
    container_name: nova-mailhog
    restart: unless-stopped
    ports:
      - "1025:1025"  # SMTP
      - "8025:8025"  # Web UI
    networks:
      - nova-network

# ============================================
# Volumes
# ============================================
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  zookeeper_data:
    driver: local
  kafka_data:
    driver: local
  clickhouse_data:
    driver: local
  clickhouse_logs:
    driver: local
  streaming_segments:
    driver: local
  neo4j_data:
    driver: local
  neo4j_logs:
    driver: local

# ============================================
# Networks
# ============================================
networks:
  nova-network:
    driver: bridge
